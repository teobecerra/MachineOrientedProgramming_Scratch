
./Debug/autopong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fbf4 	bl	200007f0 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		// Set stack 
	" MOV SP,R0\n"
	" BL main\n"				// Call main 
	"_exit: B .\n"				// Never return 
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <set_object_speed>:
{
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	60f8      	str	r0, [r7, #12]
20000018:	60b9      	str	r1, [r7, #8]
2000001a:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
2000001c:	68fb      	ldr	r3, [r7, #12]
2000001e:	68ba      	ldr	r2, [r7, #8]
20000020:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
20000022:	68fb      	ldr	r3, [r7, #12]
20000024:	687a      	ldr	r2, [r7, #4]
20000026:	609a      	str	r2, [r3, #8]
}
20000028:	46c0      	nop			; (mov r8, r8)
2000002a:	46bd      	mov	sp, r7
2000002c:	b004      	add	sp, #16
2000002e:	bd80      	pop	{r7, pc}

20000030 <draw_object>:
{
20000030:	b580      	push	{r7, lr}
20000032:	b084      	sub	sp, #16
20000034:	af00      	add	r7, sp, #0
20000036:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < o->geo->numpoints; i++)
20000038:	2300      	movs	r3, #0
2000003a:	60fb      	str	r3, [r7, #12]
2000003c:	e01e      	b.n	2000007c <draw_object+0x4c>
		pixel((o->geo->px[i].x+o->posx),(o->geo->px[i].y + o->posy), 1);
2000003e:	687b      	ldr	r3, [r7, #4]
20000040:	681a      	ldr	r2, [r3, #0]
20000042:	68fb      	ldr	r3, [r7, #12]
20000044:	3304      	adds	r3, #4
20000046:	005b      	lsls	r3, r3, #1
20000048:	18d3      	adds	r3, r2, r3
2000004a:	3304      	adds	r3, #4
2000004c:	781b      	ldrb	r3, [r3, #0]
2000004e:	001a      	movs	r2, r3
20000050:	687b      	ldr	r3, [r7, #4]
20000052:	68db      	ldr	r3, [r3, #12]
20000054:	18d0      	adds	r0, r2, r3
20000056:	687b      	ldr	r3, [r7, #4]
20000058:	681a      	ldr	r2, [r3, #0]
2000005a:	68fb      	ldr	r3, [r7, #12]
2000005c:	3304      	adds	r3, #4
2000005e:	005b      	lsls	r3, r3, #1
20000060:	18d3      	adds	r3, r2, r3
20000062:	3305      	adds	r3, #5
20000064:	781b      	ldrb	r3, [r3, #0]
20000066:	001a      	movs	r2, r3
20000068:	687b      	ldr	r3, [r7, #4]
2000006a:	691b      	ldr	r3, [r3, #16]
2000006c:	18d3      	adds	r3, r2, r3
2000006e:	2201      	movs	r2, #1
20000070:	0019      	movs	r1, r3
20000072:	f000 fadd 	bl	20000630 <pixel>
	for (int i = 0; i < o->geo->numpoints; i++)
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	3301      	adds	r3, #1
2000007a:	60fb      	str	r3, [r7, #12]
2000007c:	687b      	ldr	r3, [r7, #4]
2000007e:	681b      	ldr	r3, [r3, #0]
20000080:	681b      	ldr	r3, [r3, #0]
20000082:	68fa      	ldr	r2, [r7, #12]
20000084:	429a      	cmp	r2, r3
20000086:	dbda      	blt.n	2000003e <draw_object+0xe>
}
20000088:	46c0      	nop			; (mov r8, r8)
2000008a:	46bd      	mov	sp, r7
2000008c:	b004      	add	sp, #16
2000008e:	bd80      	pop	{r7, pc}

20000090 <clear_object>:
{
20000090:	b580      	push	{r7, lr}
20000092:	b084      	sub	sp, #16
20000094:	af00      	add	r7, sp, #0
20000096:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < o->geo->numpoints; i++)
20000098:	2300      	movs	r3, #0
2000009a:	60fb      	str	r3, [r7, #12]
2000009c:	e01e      	b.n	200000dc <clear_object+0x4c>
		pixel((o->geo->px[i].x + o->posx),(o->geo->px[i].y + o->posy), 0);
2000009e:	687b      	ldr	r3, [r7, #4]
200000a0:	681a      	ldr	r2, [r3, #0]
200000a2:	68fb      	ldr	r3, [r7, #12]
200000a4:	3304      	adds	r3, #4
200000a6:	005b      	lsls	r3, r3, #1
200000a8:	18d3      	adds	r3, r2, r3
200000aa:	3304      	adds	r3, #4
200000ac:	781b      	ldrb	r3, [r3, #0]
200000ae:	001a      	movs	r2, r3
200000b0:	687b      	ldr	r3, [r7, #4]
200000b2:	68db      	ldr	r3, [r3, #12]
200000b4:	18d0      	adds	r0, r2, r3
200000b6:	687b      	ldr	r3, [r7, #4]
200000b8:	681a      	ldr	r2, [r3, #0]
200000ba:	68fb      	ldr	r3, [r7, #12]
200000bc:	3304      	adds	r3, #4
200000be:	005b      	lsls	r3, r3, #1
200000c0:	18d3      	adds	r3, r2, r3
200000c2:	3305      	adds	r3, #5
200000c4:	781b      	ldrb	r3, [r3, #0]
200000c6:	001a      	movs	r2, r3
200000c8:	687b      	ldr	r3, [r7, #4]
200000ca:	691b      	ldr	r3, [r3, #16]
200000cc:	18d3      	adds	r3, r2, r3
200000ce:	2200      	movs	r2, #0
200000d0:	0019      	movs	r1, r3
200000d2:	f000 faad 	bl	20000630 <pixel>
	for(int i = 0; i < o->geo->numpoints; i++)
200000d6:	68fb      	ldr	r3, [r7, #12]
200000d8:	3301      	adds	r3, #1
200000da:	60fb      	str	r3, [r7, #12]
200000dc:	687b      	ldr	r3, [r7, #4]
200000de:	681b      	ldr	r3, [r3, #0]
200000e0:	681b      	ldr	r3, [r3, #0]
200000e2:	68fa      	ldr	r2, [r7, #12]
200000e4:	429a      	cmp	r2, r3
200000e6:	dbda      	blt.n	2000009e <clear_object+0xe>
}
200000e8:	46c0      	nop			; (mov r8, r8)
200000ea:	46bd      	mov	sp, r7
200000ec:	b004      	add	sp, #16
200000ee:	bd80      	pop	{r7, pc}

200000f0 <move_object>:
{
200000f0:	b580      	push	{r7, lr}
200000f2:	b082      	sub	sp, #8
200000f4:	af00      	add	r7, sp, #0
200000f6:	6078      	str	r0, [r7, #4]
	clear_object(o);
200000f8:	687b      	ldr	r3, [r7, #4]
200000fa:	0018      	movs	r0, r3
200000fc:	f7ff ffc8 	bl	20000090 <clear_object>
	o->posx = (o->posx + o->dirx);
20000100:	687b      	ldr	r3, [r7, #4]
20000102:	68da      	ldr	r2, [r3, #12]
20000104:	687b      	ldr	r3, [r7, #4]
20000106:	685b      	ldr	r3, [r3, #4]
20000108:	18d2      	adds	r2, r2, r3
2000010a:	687b      	ldr	r3, [r7, #4]
2000010c:	60da      	str	r2, [r3, #12]
	o->posy = (o->posy + o->diry);
2000010e:	687b      	ldr	r3, [r7, #4]
20000110:	691a      	ldr	r2, [r3, #16]
20000112:	687b      	ldr	r3, [r7, #4]
20000114:	689b      	ldr	r3, [r3, #8]
20000116:	18d2      	adds	r2, r2, r3
20000118:	687b      	ldr	r3, [r7, #4]
2000011a:	611a      	str	r2, [r3, #16]
	if (o->posx < 1)						//Left border limit -> reverse direction
2000011c:	687b      	ldr	r3, [r7, #4]
2000011e:	68db      	ldr	r3, [r3, #12]
20000120:	2b00      	cmp	r3, #0
20000122:	dc04      	bgt.n	2000012e <move_object+0x3e>
		o->dirx = -(o->dirx);
20000124:	687b      	ldr	r3, [r7, #4]
20000126:	685b      	ldr	r3, [r3, #4]
20000128:	425a      	negs	r2, r3
2000012a:	687b      	ldr	r3, [r7, #4]
2000012c:	605a      	str	r2, [r3, #4]
	if ( (o->posx  + o->geo->sizex) > 128)	//Right border limit -> reverse direction
2000012e:	687b      	ldr	r3, [r7, #4]
20000130:	68da      	ldr	r2, [r3, #12]
20000132:	687b      	ldr	r3, [r7, #4]
20000134:	681b      	ldr	r3, [r3, #0]
20000136:	685b      	ldr	r3, [r3, #4]
20000138:	18d3      	adds	r3, r2, r3
2000013a:	2b80      	cmp	r3, #128	; 0x80
2000013c:	dd04      	ble.n	20000148 <move_object+0x58>
		o->dirx = -(o->dirx);
2000013e:	687b      	ldr	r3, [r7, #4]
20000140:	685b      	ldr	r3, [r3, #4]
20000142:	425a      	negs	r2, r3
20000144:	687b      	ldr	r3, [r7, #4]
20000146:	605a      	str	r2, [r3, #4]
	if (o->posy < 1) 
20000148:	687b      	ldr	r3, [r7, #4]
2000014a:	691b      	ldr	r3, [r3, #16]
2000014c:	2b00      	cmp	r3, #0
2000014e:	dc04      	bgt.n	2000015a <move_object+0x6a>
		o->diry = -(o->diry);
20000150:	687b      	ldr	r3, [r7, #4]
20000152:	689b      	ldr	r3, [r3, #8]
20000154:	425a      	negs	r2, r3
20000156:	687b      	ldr	r3, [r7, #4]
20000158:	609a      	str	r2, [r3, #8]
	if ((o->posy + o->geo->sizey) > 64)
2000015a:	687b      	ldr	r3, [r7, #4]
2000015c:	691a      	ldr	r2, [r3, #16]
2000015e:	687b      	ldr	r3, [r7, #4]
20000160:	681b      	ldr	r3, [r3, #0]
20000162:	689b      	ldr	r3, [r3, #8]
20000164:	18d3      	adds	r3, r2, r3
20000166:	2b40      	cmp	r3, #64	; 0x40
20000168:	dd04      	ble.n	20000174 <move_object+0x84>
		o->diry = -(o->diry);
2000016a:	687b      	ldr	r3, [r7, #4]
2000016c:	689b      	ldr	r3, [r3, #8]
2000016e:	425a      	negs	r2, r3
20000170:	687b      	ldr	r3, [r7, #4]
20000172:	609a      	str	r2, [r3, #8]
	draw_object(o);
20000174:	687b      	ldr	r3, [r7, #4]
20000176:	0018      	movs	r0, r3
20000178:	f7ff ff5a 	bl	20000030 <draw_object>
}
2000017c:	46c0      	nop			; (mov r8, r8)
2000017e:	46bd      	mov	sp, r7
20000180:	b002      	add	sp, #8
20000182:	bd80      	pop	{r7, pc}

20000184 <delay_250ns>:
{
20000184:	b580      	push	{r7, lr}
20000186:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;					//Initiate counter by resetting bit to 0
20000188:	4b0c      	ldr	r3, [pc, #48]	; (200001bc <delay_250ns+0x38>)
2000018a:	2200      	movs	r2, #0
2000018c:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/4) -1 );		//Counter value 168 000 000 = 1 sec, 168 = 1 microsec = 1000 nanosec / 4 = 250ns 
2000018e:	4b0c      	ldr	r3, [pc, #48]	; (200001c0 <delay_250ns+0x3c>)
20000190:	2229      	movs	r2, #41	; 0x29
20000192:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;					//Reset counter register
20000194:	4b0b      	ldr	r3, [pc, #44]	; (200001c4 <delay_250ns+0x40>)
20000196:	2200      	movs	r2, #0
20000198:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;					
2000019a:	4b08      	ldr	r3, [pc, #32]	; (200001bc <delay_250ns+0x38>)
2000019c:	2205      	movs	r2, #5
2000019e:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000 )== 0 );
200001a0:	46c0      	nop			; (mov r8, r8)
200001a2:	4b06      	ldr	r3, [pc, #24]	; (200001bc <delay_250ns+0x38>)
200001a4:	681a      	ldr	r2, [r3, #0]
200001a6:	2380      	movs	r3, #128	; 0x80
200001a8:	025b      	lsls	r3, r3, #9
200001aa:	4013      	ands	r3, r2
200001ac:	d0f9      	beq.n	200001a2 <delay_250ns+0x1e>
	*STK_CTRL = 0;
200001ae:	4b03      	ldr	r3, [pc, #12]	; (200001bc <delay_250ns+0x38>)
200001b0:	2200      	movs	r2, #0
200001b2:	601a      	str	r2, [r3, #0]
}
200001b4:	46c0      	nop			; (mov r8, r8)
200001b6:	46bd      	mov	sp, r7
200001b8:	bd80      	pop	{r7, pc}
200001ba:	46c0      	nop			; (mov r8, r8)
200001bc:	e000e010 	and	lr, r0, r0, lsl r0
200001c0:	e000e014 	and	lr, r0, r4, lsl r0
200001c4:	e000e018 	and	lr, r0, r8, lsl r0

200001c8 <delay_500ns>:
{
200001c8:	b580      	push	{r7, lr}
200001ca:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;					
200001cc:	4b0c      	ldr	r3, [pc, #48]	; (20000200 <delay_500ns+0x38>)
200001ce:	2200      	movs	r2, #0
200001d0:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/2) -1 );		
200001d2:	4b0c      	ldr	r3, [pc, #48]	; (20000204 <delay_500ns+0x3c>)
200001d4:	2253      	movs	r2, #83	; 0x53
200001d6:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;					
200001d8:	4b0b      	ldr	r3, [pc, #44]	; (20000208 <delay_500ns+0x40>)
200001da:	2200      	movs	r2, #0
200001dc:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;					
200001de:	4b08      	ldr	r3, [pc, #32]	; (20000200 <delay_500ns+0x38>)
200001e0:	2205      	movs	r2, #5
200001e2:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000 )== 0 );
200001e4:	46c0      	nop			; (mov r8, r8)
200001e6:	4b06      	ldr	r3, [pc, #24]	; (20000200 <delay_500ns+0x38>)
200001e8:	681a      	ldr	r2, [r3, #0]
200001ea:	2380      	movs	r3, #128	; 0x80
200001ec:	025b      	lsls	r3, r3, #9
200001ee:	4013      	ands	r3, r2
200001f0:	d0f9      	beq.n	200001e6 <delay_500ns+0x1e>
	*STK_CTRL = 0;
200001f2:	4b03      	ldr	r3, [pc, #12]	; (20000200 <delay_500ns+0x38>)
200001f4:	2200      	movs	r2, #0
200001f6:	601a      	str	r2, [r3, #0]
}
200001f8:	46c0      	nop			; (mov r8, r8)
200001fa:	46bd      	mov	sp, r7
200001fc:	bd80      	pop	{r7, pc}
200001fe:	46c0      	nop			; (mov r8, r8)
20000200:	e000e010 	and	lr, r0, r0, lsl r0
20000204:	e000e014 	and	lr, r0, r4, lsl r0
20000208:	e000e018 	and	lr, r0, r8, lsl r0

2000020c <delay_micro>:
{
2000020c:	b580      	push	{r7, lr}
2000020e:	b082      	sub	sp, #8
20000210:	af00      	add	r7, sp, #0
20000212:	6078      	str	r0, [r7, #4]
	us = us / 1000;
20000214:	687a      	ldr	r2, [r7, #4]
20000216:	23fa      	movs	r3, #250	; 0xfa
20000218:	0099      	lsls	r1, r3, #2
2000021a:	0010      	movs	r0, r2
2000021c:	f000 fb02 	bl	20000824 <__udivsi3>
20000220:	0003      	movs	r3, r0
20000222:	607b      	str	r3, [r7, #4]
	us++;
20000224:	687b      	ldr	r3, [r7, #4]
20000226:	3301      	adds	r3, #1
20000228:	607b      	str	r3, [r7, #4]
	while (us>0)
2000022a:	e00a      	b.n	20000242 <delay_micro+0x36>
	delay_250ns();
2000022c:	f7ff ffaa 	bl	20000184 <delay_250ns>
	delay_250ns();
20000230:	f7ff ffa8 	bl	20000184 <delay_250ns>
	delay_250ns();
20000234:	f7ff ffa6 	bl	20000184 <delay_250ns>
	delay_250ns();
20000238:	f7ff ffa4 	bl	20000184 <delay_250ns>
	us--;
2000023c:	687b      	ldr	r3, [r7, #4]
2000023e:	3b01      	subs	r3, #1
20000240:	607b      	str	r3, [r7, #4]
	while (us>0)
20000242:	687b      	ldr	r3, [r7, #4]
20000244:	2b00      	cmp	r3, #0
20000246:	d1f1      	bne.n	2000022c <delay_micro+0x20>
}
20000248:	46c0      	nop			; (mov r8, r8)
2000024a:	46bd      	mov	sp, r7
2000024c:	b002      	add	sp, #8
2000024e:	bd80      	pop	{r7, pc}

20000250 <delay_milli>:
{
20000250:	b580      	push	{r7, lr}
20000252:	b082      	sub	sp, #8
20000254:	af00      	add	r7, sp, #0
20000256:	6078      	str	r0, [r7, #4]
	delay_micro(1000*ms);
20000258:	687a      	ldr	r2, [r7, #4]
2000025a:	0013      	movs	r3, r2
2000025c:	015b      	lsls	r3, r3, #5
2000025e:	1a9b      	subs	r3, r3, r2
20000260:	009b      	lsls	r3, r3, #2
20000262:	189b      	adds	r3, r3, r2
20000264:	00db      	lsls	r3, r3, #3
20000266:	0018      	movs	r0, r3
20000268:	f7ff ffd0 	bl	2000020c <delay_micro>
}
2000026c:	46c0      	nop			; (mov r8, r8)
2000026e:	46bd      	mov	sp, r7
20000270:	b002      	add	sp, #8
20000272:	bd80      	pop	{r7, pc}

20000274 <graphic_ctrl_bit_set>:

void graphic_ctrl_bit_set (uint8_t x) 
{
20000274:	b580      	push	{r7, lr}
20000276:	b084      	sub	sp, #16
20000278:	af00      	add	r7, sp, #0
2000027a:	0002      	movs	r2, r0
2000027c:	1dfb      	adds	r3, r7, #7
2000027e:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *GPIO_ODR_LOW;
20000280:	4a0c      	ldr	r2, [pc, #48]	; (200002b4 <graphic_ctrl_bit_set+0x40>)
20000282:	210f      	movs	r1, #15
20000284:	187b      	adds	r3, r7, r1
20000286:	7812      	ldrb	r2, [r2, #0]
20000288:	701a      	strb	r2, [r3, #0]
	c |= (~B_SELECT & x);
2000028a:	1dfb      	adds	r3, r7, #7
2000028c:	781b      	ldrb	r3, [r3, #0]
2000028e:	b25b      	sxtb	r3, r3
20000290:	2204      	movs	r2, #4
20000292:	4393      	bics	r3, r2
20000294:	b25a      	sxtb	r2, r3
20000296:	187b      	adds	r3, r7, r1
20000298:	781b      	ldrb	r3, [r3, #0]
2000029a:	b25b      	sxtb	r3, r3
2000029c:	4313      	orrs	r3, r2
2000029e:	b25a      	sxtb	r2, r3
200002a0:	187b      	adds	r3, r7, r1
200002a2:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_LOW = c;
200002a4:	4a03      	ldr	r2, [pc, #12]	; (200002b4 <graphic_ctrl_bit_set+0x40>)
200002a6:	187b      	adds	r3, r7, r1
200002a8:	781b      	ldrb	r3, [r3, #0]
200002aa:	7013      	strb	r3, [r2, #0]
}
200002ac:	46c0      	nop			; (mov r8, r8)
200002ae:	46bd      	mov	sp, r7
200002b0:	b004      	add	sp, #16
200002b2:	bd80      	pop	{r7, pc}
200002b4:	40021014 	andmi	r1, r2, r4, lsl r0

200002b8 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear( uint8_t x )
{
200002b8:	b580      	push	{r7, lr}
200002ba:	b084      	sub	sp, #16
200002bc:	af00      	add	r7, sp, #0
200002be:	0002      	movs	r2, r0
200002c0:	1dfb      	adds	r3, r7, #7
200002c2:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = *GPIO_ODR_LOW;
200002c4:	4a0e      	ldr	r2, [pc, #56]	; (20000300 <graphic_ctrl_bit_clear+0x48>)
200002c6:	210f      	movs	r1, #15
200002c8:	187b      	adds	r3, r7, r1
200002ca:	7812      	ldrb	r2, [r2, #0]
200002cc:	701a      	strb	r2, [r3, #0]
	c = ~B_SELECT & ( c & ~x);
200002ce:	1dfb      	adds	r3, r7, #7
200002d0:	781b      	ldrb	r3, [r3, #0]
200002d2:	b25b      	sxtb	r3, r3
200002d4:	43db      	mvns	r3, r3
200002d6:	b25b      	sxtb	r3, r3
200002d8:	187a      	adds	r2, r7, r1
200002da:	7812      	ldrb	r2, [r2, #0]
200002dc:	b252      	sxtb	r2, r2
200002de:	4013      	ands	r3, r2
200002e0:	b25b      	sxtb	r3, r3
200002e2:	b2da      	uxtb	r2, r3
200002e4:	0008      	movs	r0, r1
200002e6:	187b      	adds	r3, r7, r1
200002e8:	2104      	movs	r1, #4
200002ea:	438a      	bics	r2, r1
200002ec:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_LOW = c;
200002ee:	4a04      	ldr	r2, [pc, #16]	; (20000300 <graphic_ctrl_bit_clear+0x48>)
200002f0:	0001      	movs	r1, r0
200002f2:	187b      	adds	r3, r7, r1
200002f4:	781b      	ldrb	r3, [r3, #0]
200002f6:	7013      	strb	r3, [r2, #0]
}
200002f8:	46c0      	nop			; (mov r8, r8)
200002fa:	46bd      	mov	sp, r7
200002fc:	b004      	add	sp, #16
200002fe:	bd80      	pop	{r7, pc}
20000300:	40021014 	andmi	r1, r2, r4, lsl r0

20000304 <select_controller>:

void select_controller (uint8_t controller)		
{
20000304:	b580      	push	{r7, lr}
20000306:	b082      	sub	sp, #8
20000308:	af00      	add	r7, sp, #0
2000030a:	0002      	movs	r2, r0
2000030c:	1dfb      	adds	r3, r7, #7
2000030e:	701a      	strb	r2, [r3, #0]
	switch (controller){
20000310:	1dfb      	adds	r3, r7, #7
20000312:	781b      	ldrb	r3, [r3, #0]
20000314:	2b08      	cmp	r3, #8
20000316:	d00c      	beq.n	20000332 <select_controller+0x2e>
20000318:	dc02      	bgt.n	20000320 <select_controller+0x1c>
2000031a:	2b00      	cmp	r3, #0
2000031c:	d005      	beq.n	2000032a <select_controller+0x26>
		case B_CS1 | B_CS2:
		graphic_ctrl_bit_set(B_CS1 | B_CS2);
		break;
	}
	 
}
2000031e:	e01a      	b.n	20000356 <select_controller+0x52>
	switch (controller){
20000320:	2b10      	cmp	r3, #16
20000322:	d00d      	beq.n	20000340 <select_controller+0x3c>
20000324:	2b18      	cmp	r3, #24
20000326:	d012      	beq.n	2000034e <select_controller+0x4a>
}
20000328:	e015      	b.n	20000356 <select_controller+0x52>
		graphic_ctrl_bit_clear (B_CS1 | B_CS2); 
2000032a:	2018      	movs	r0, #24
2000032c:	f7ff ffc4 	bl	200002b8 <graphic_ctrl_bit_clear>
		break;
20000330:	e011      	b.n	20000356 <select_controller+0x52>
		graphic_ctrl_bit_set(B_CS1); 
20000332:	2008      	movs	r0, #8
20000334:	f7ff ff9e 	bl	20000274 <graphic_ctrl_bit_set>
		graphic_ctrl_bit_clear(B_CS2);
20000338:	2010      	movs	r0, #16
2000033a:	f7ff ffbd 	bl	200002b8 <graphic_ctrl_bit_clear>
		break;
2000033e:	e00a      	b.n	20000356 <select_controller+0x52>
		graphic_ctrl_bit_clear(B_CS1);
20000340:	2008      	movs	r0, #8
20000342:	f7ff ffb9 	bl	200002b8 <graphic_ctrl_bit_clear>
		graphic_ctrl_bit_set(B_CS2);
20000346:	2010      	movs	r0, #16
20000348:	f7ff ff94 	bl	20000274 <graphic_ctrl_bit_set>
		break;
2000034c:	e003      	b.n	20000356 <select_controller+0x52>
		graphic_ctrl_bit_set(B_CS1 | B_CS2);
2000034e:	2018      	movs	r0, #24
20000350:	f7ff ff90 	bl	20000274 <graphic_ctrl_bit_set>
		break;
20000354:	46c0      	nop			; (mov r8, r8)
}
20000356:	46c0      	nop			; (mov r8, r8)
20000358:	46bd      	mov	sp, r7
2000035a:	b002      	add	sp, #8
2000035c:	bd80      	pop	{r7, pc}

2000035e <graphic_wait_ready>:

static void graphic_wait_ready (void)			
{
2000035e:	b580      	push	{r7, lr}
20000360:	b082      	sub	sp, #8
20000362:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20000364:	2040      	movs	r0, #64	; 0x40
20000366:	f7ff ffa7 	bl	200002b8 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;			//15-8 Input 7-0 Output
2000036a:	4b14      	ldr	r3, [pc, #80]	; (200003bc <graphic_wait_ready+0x5e>)
2000036c:	4a14      	ldr	r2, [pc, #80]	; (200003c0 <graphic_wait_ready+0x62>)
2000036e:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
20000370:	2001      	movs	r0, #1
20000372:	f7ff ffa1 	bl	200002b8 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
20000376:	2002      	movs	r0, #2
20000378:	f7ff ff7c 	bl	20000274 <graphic_ctrl_bit_set>
	delay_500ns();
2000037c:	f7ff ff24 	bl	200001c8 <delay_500ns>
	while(1)
	{
		if (c == 0) break;
20000380:	1dfb      	adds	r3, r7, #7
20000382:	781b      	ldrb	r3, [r3, #0]
20000384:	2b00      	cmp	r3, #0
20000386:	d011      	beq.n	200003ac <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
20000388:	2040      	movs	r0, #64	; 0x40
2000038a:	f7ff ff73 	bl	20000274 <graphic_ctrl_bit_set>
		delay_500ns();
2000038e:	f7ff ff1b 	bl	200001c8 <delay_500ns>
		c = *GPIO_IDR_HIGH & LCD_BUSY;
20000392:	4b0c      	ldr	r3, [pc, #48]	; (200003c4 <graphic_wait_ready+0x66>)
20000394:	781b      	ldrb	r3, [r3, #0]
20000396:	b2da      	uxtb	r2, r3
20000398:	1dfb      	adds	r3, r7, #7
2000039a:	217f      	movs	r1, #127	; 0x7f
2000039c:	438a      	bics	r2, r1
2000039e:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
200003a0:	2040      	movs	r0, #64	; 0x40
200003a2:	f7ff ff89 	bl	200002b8 <graphic_ctrl_bit_clear>
		delay_500ns();
200003a6:	f7ff ff0f 	bl	200001c8 <delay_500ns>
		if (c == 0) break;
200003aa:	e7e9      	b.n	20000380 <graphic_wait_ready+0x22>
200003ac:	46c0      	nop			; (mov r8, r8)
	}
	
	*portModer = 0x55555555;			//15-0 Outputs
200003ae:	4b03      	ldr	r3, [pc, #12]	; (200003bc <graphic_wait_ready+0x5e>)
200003b0:	4a05      	ldr	r2, [pc, #20]	; (200003c8 <graphic_wait_ready+0x6a>)
200003b2:	601a      	str	r2, [r3, #0]
}
200003b4:	46c0      	nop			; (mov r8, r8)
200003b6:	46bd      	mov	sp, r7
200003b8:	b002      	add	sp, #8
200003ba:	bd80      	pop	{r7, pc}
200003bc:	40021000 	andmi	r1, r2, r0
200003c0:	00005555 	andeq	r5, r0, r5, asr r5
200003c4:	40021011 	andmi	r1, r2, r1, lsl r0
200003c8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003cc <graphic_read>:

static uint8_t graphic_read(uint8_t controller)	
{
200003cc:	b580      	push	{r7, lr}
200003ce:	b084      	sub	sp, #16
200003d0:	af00      	add	r7, sp, #0
200003d2:	0002      	movs	r2, r0
200003d4:	1dfb      	adds	r3, r7, #7
200003d6:	701a      	strb	r2, [r3, #0]
	uint8_t rv;
	graphic_ctrl_bit_clear(B_E);
200003d8:	2040      	movs	r0, #64	; 0x40
200003da:	f7ff ff6d 	bl	200002b8 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555;					//15-8 Input, 7-0 Output
200003de:	4b18      	ldr	r3, [pc, #96]	; (20000440 <graphic_read+0x74>)
200003e0:	4a18      	ldr	r2, [pc, #96]	; (20000444 <graphic_read+0x78>)
200003e2:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW);
200003e4:	2003      	movs	r0, #3
200003e6:	f7ff ff45 	bl	20000274 <graphic_ctrl_bit_set>
	select_controller(controller);
200003ea:	1dfb      	adds	r3, r7, #7
200003ec:	781b      	ldrb	r3, [r3, #0]
200003ee:	0018      	movs	r0, r3
200003f0:	f7ff ff88 	bl	20000304 <select_controller>
	delay_500ns;
	graphic_ctrl_bit_set(B_E);
200003f4:	2040      	movs	r0, #64	; 0x40
200003f6:	f7ff ff3d 	bl	20000274 <graphic_ctrl_bit_set>
	delay_500ns;
	rv = *GPIO_IDR_HIGH;
200003fa:	4a13      	ldr	r2, [pc, #76]	; (20000448 <graphic_read+0x7c>)
200003fc:	230f      	movs	r3, #15
200003fe:	18fb      	adds	r3, r7, r3
20000400:	7812      	ldrb	r2, [r2, #0]
20000402:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000404:	2040      	movs	r0, #64	; 0x40
20000406:	f7ff ff57 	bl	200002b8 <graphic_ctrl_bit_clear>
	*portModer = 0x55555555;
2000040a:	4b0d      	ldr	r3, [pc, #52]	; (20000440 <graphic_read+0x74>)
2000040c:	4a0f      	ldr	r2, [pc, #60]	; (2000044c <graphic_read+0x80>)
2000040e:	601a      	str	r2, [r3, #0]
	if ( controller & B_CS1)
20000410:	1dfb      	adds	r3, r7, #7
20000412:	781b      	ldrb	r3, [r3, #0]
20000414:	2208      	movs	r2, #8
20000416:	4013      	ands	r3, r2
20000418:	d002      	beq.n	20000420 <graphic_read+0x54>
	{
		select_controller(B_CS1);
2000041a:	2008      	movs	r0, #8
2000041c:	f7ff ff72 	bl	20000304 <select_controller>
		graphic_wait_ready;
	}
	if ( controller & B_CS2)
20000420:	1dfb      	adds	r3, r7, #7
20000422:	781b      	ldrb	r3, [r3, #0]
20000424:	2210      	movs	r2, #16
20000426:	4013      	ands	r3, r2
20000428:	d002      	beq.n	20000430 <graphic_read+0x64>
	{
		select_controller(B_CS2);
2000042a:	2010      	movs	r0, #16
2000042c:	f7ff ff6a 	bl	20000304 <select_controller>
		graphic_wait_ready;
	}
	return rv;
20000430:	230f      	movs	r3, #15
20000432:	18fb      	adds	r3, r7, r3
20000434:	781b      	ldrb	r3, [r3, #0]
}
20000436:	0018      	movs	r0, r3
20000438:	46bd      	mov	sp, r7
2000043a:	b004      	add	sp, #16
2000043c:	bd80      	pop	{r7, pc}
2000043e:	46c0      	nop			; (mov r8, r8)
20000440:	40021000 	andmi	r1, r2, r0
20000444:	00005555 	andeq	r5, r0, r5, asr r5
20000448:	40021011 	andmi	r1, r2, r1, lsl r0
2000044c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000450 <graphic_read_data>:

static uint8_t graphic_read_data(uint8_t controller)
{
20000450:	b580      	push	{r7, lr}
20000452:	b082      	sub	sp, #8
20000454:	af00      	add	r7, sp, #0
20000456:	0002      	movs	r2, r0
20000458:	1dfb      	adds	r3, r7, #7
2000045a:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
2000045c:	1dfb      	adds	r3, r7, #7
2000045e:	781b      	ldrb	r3, [r3, #0]
20000460:	0018      	movs	r0, r3
20000462:	f7ff ffb3 	bl	200003cc <graphic_read>
	return graphic_read(controller);
20000466:	1dfb      	adds	r3, r7, #7
20000468:	781b      	ldrb	r3, [r3, #0]
2000046a:	0018      	movs	r0, r3
2000046c:	f7ff ffae 	bl	200003cc <graphic_read>
20000470:	0003      	movs	r3, r0
}
20000472:	0018      	movs	r0, r3
20000474:	46bd      	mov	sp, r7
20000476:	b002      	add	sp, #8
20000478:	bd80      	pop	{r7, pc}

2000047a <graphic_write>:

static void graphic_write (uint8_t value, uint8_t controller)
{
2000047a:	b580      	push	{r7, lr}
2000047c:	b082      	sub	sp, #8
2000047e:	af00      	add	r7, sp, #0
20000480:	0002      	movs	r2, r0
20000482:	1dfb      	adds	r3, r7, #7
20000484:	701a      	strb	r2, [r3, #0]
20000486:	1dbb      	adds	r3, r7, #6
20000488:	1c0a      	adds	r2, r1, #0
2000048a:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_HIGH = value;
2000048c:	4a15      	ldr	r2, [pc, #84]	; (200004e4 <graphic_write+0x6a>)
2000048e:	1dfb      	adds	r3, r7, #7
20000490:	781b      	ldrb	r3, [r3, #0]
20000492:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
20000494:	1dbb      	adds	r3, r7, #6
20000496:	781b      	ldrb	r3, [r3, #0]
20000498:	0018      	movs	r0, r3
2000049a:	f7ff ff33 	bl	20000304 <select_controller>
	delay_500ns;
	graphic_ctrl_bit_set(B_E);
2000049e:	2040      	movs	r0, #64	; 0x40
200004a0:	f7ff fee8 	bl	20000274 <graphic_ctrl_bit_set>
	delay_500ns;
	graphic_ctrl_bit_clear(B_E);
200004a4:	2040      	movs	r0, #64	; 0x40
200004a6:	f7ff ff07 	bl	200002b8 <graphic_ctrl_bit_clear>
	
	if (controller & B_CS1)
200004aa:	1dbb      	adds	r3, r7, #6
200004ac:	781b      	ldrb	r3, [r3, #0]
200004ae:	2208      	movs	r2, #8
200004b0:	4013      	ands	r3, r2
200004b2:	d002      	beq.n	200004ba <graphic_write+0x40>
	{
		select_controller(B_CS1);
200004b4:	2008      	movs	r0, #8
200004b6:	f7ff ff25 	bl	20000304 <select_controller>
		graphic_wait_ready;
	}
	if (controller & B_CS2)
200004ba:	1dbb      	adds	r3, r7, #6
200004bc:	781b      	ldrb	r3, [r3, #0]
200004be:	2210      	movs	r2, #16
200004c0:	4013      	ands	r3, r2
200004c2:	d002      	beq.n	200004ca <graphic_write+0x50>
	{
		select_controller(B_CS2);
200004c4:	2010      	movs	r0, #16
200004c6:	f7ff ff1d 	bl	20000304 <select_controller>
		graphic_wait_ready;
	}
	
	*GPIO_ODR_HIGH = 0;
200004ca:	4b06      	ldr	r3, [pc, #24]	; (200004e4 <graphic_write+0x6a>)
200004cc:	2200      	movs	r2, #0
200004ce:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
200004d0:	2040      	movs	r0, #64	; 0x40
200004d2:	f7ff fecf 	bl	20000274 <graphic_ctrl_bit_set>
	select_controller(0);
200004d6:	2000      	movs	r0, #0
200004d8:	f7ff ff14 	bl	20000304 <select_controller>
}
200004dc:	46c0      	nop			; (mov r8, r8)
200004de:	46bd      	mov	sp, r7
200004e0:	b002      	add	sp, #8
200004e2:	bd80      	pop	{r7, pc}
200004e4:	40021015 	andmi	r1, r2, r5, lsl r0

200004e8 <graphic_write_command>:

static void graphic_write_command(uint8_t command, uint8_t controller)
{
200004e8:	b580      	push	{r7, lr}
200004ea:	b082      	sub	sp, #8
200004ec:	af00      	add	r7, sp, #0
200004ee:	0002      	movs	r2, r0
200004f0:	1dfb      	adds	r3, r7, #7
200004f2:	701a      	strb	r2, [r3, #0]
200004f4:	1dbb      	adds	r3, r7, #6
200004f6:	1c0a      	adds	r2, r1, #0
200004f8:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200004fa:	2040      	movs	r0, #64	; 0x40
200004fc:	f7ff fedc 	bl	200002b8 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000500:	1dbb      	adds	r3, r7, #6
20000502:	781b      	ldrb	r3, [r3, #0]
20000504:	0018      	movs	r0, r3
20000506:	f7ff fefd 	bl	20000304 <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);
2000050a:	2003      	movs	r0, #3
2000050c:	f7ff fed4 	bl	200002b8 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000510:	1dbb      	adds	r3, r7, #6
20000512:	781a      	ldrb	r2, [r3, #0]
20000514:	1dfb      	adds	r3, r7, #7
20000516:	781b      	ldrb	r3, [r3, #0]
20000518:	0011      	movs	r1, r2
2000051a:	0018      	movs	r0, r3
2000051c:	f7ff ffad 	bl	2000047a <graphic_write>
}
20000520:	46c0      	nop			; (mov r8, r8)
20000522:	46bd      	mov	sp, r7
20000524:	b002      	add	sp, #8
20000526:	bd80      	pop	{r7, pc}

20000528 <graphic_write_data>:

static void graphic_write_data(uint8_t data, uint8_t controller)
{
20000528:	b580      	push	{r7, lr}
2000052a:	b082      	sub	sp, #8
2000052c:	af00      	add	r7, sp, #0
2000052e:	0002      	movs	r2, r0
20000530:	1dfb      	adds	r3, r7, #7
20000532:	701a      	strb	r2, [r3, #0]
20000534:	1dbb      	adds	r3, r7, #6
20000536:	1c0a      	adds	r2, r1, #0
20000538:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000053a:	2040      	movs	r0, #64	; 0x40
2000053c:	f7ff febc 	bl	200002b8 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000540:	1dbb      	adds	r3, r7, #6
20000542:	781b      	ldrb	r3, [r3, #0]
20000544:	0018      	movs	r0, r3
20000546:	f7ff fedd 	bl	20000304 <select_controller>
	graphic_ctrl_bit_set(B_RS);
2000054a:	2001      	movs	r0, #1
2000054c:	f7ff fe92 	bl	20000274 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000550:	2002      	movs	r0, #2
20000552:	f7ff feb1 	bl	200002b8 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
20000556:	1dbb      	adds	r3, r7, #6
20000558:	781a      	ldrb	r2, [r3, #0]
2000055a:	1dfb      	adds	r3, r7, #7
2000055c:	781b      	ldrb	r3, [r3, #0]
2000055e:	0011      	movs	r1, r2
20000560:	0018      	movs	r0, r3
20000562:	f7ff ff8a 	bl	2000047a <graphic_write>
}
20000566:	46c0      	nop			; (mov r8, r8)
20000568:	46bd      	mov	sp, r7
2000056a:	b002      	add	sp, #8
2000056c:	bd80      	pop	{r7, pc}

2000056e <graphic_clear_screen>:

void graphic_clear_screen(void) 
{
2000056e:	b580      	push	{r7, lr}
20000570:	b082      	sub	sp, #8
20000572:	af00      	add	r7, sp, #0
	for (char page = 0; page < 8; page++)
20000574:	1dfb      	adds	r3, r7, #7
20000576:	2200      	movs	r2, #0
20000578:	701a      	strb	r2, [r3, #0]
2000057a:	e023      	b.n	200005c4 <graphic_clear_screen+0x56>
	{
		graphic_write_command(LCD_SET_PAGE | page	, B_CS1|B_CS2);
2000057c:	1dfb      	adds	r3, r7, #7
2000057e:	781b      	ldrb	r3, [r3, #0]
20000580:	2248      	movs	r2, #72	; 0x48
20000582:	4252      	negs	r2, r2
20000584:	4313      	orrs	r3, r2
20000586:	b2db      	uxtb	r3, r3
20000588:	2118      	movs	r1, #24
2000058a:	0018      	movs	r0, r3
2000058c:	f7ff ffac 	bl	200004e8 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD  | 0	, B_CS1|B_CS2);
20000590:	2118      	movs	r1, #24
20000592:	2040      	movs	r0, #64	; 0x40
20000594:	f7ff ffa8 	bl	200004e8 <graphic_write_command>
		
		for (char add = 0; add < 64; add++)
20000598:	1dbb      	adds	r3, r7, #6
2000059a:	2200      	movs	r2, #0
2000059c:	701a      	strb	r2, [r3, #0]
2000059e:	e008      	b.n	200005b2 <graphic_clear_screen+0x44>
		{
			graphic_write_data(0, B_CS1 | B_CS2);
200005a0:	2118      	movs	r1, #24
200005a2:	2000      	movs	r0, #0
200005a4:	f7ff ffc0 	bl	20000528 <graphic_write_data>
		for (char add = 0; add < 64; add++)
200005a8:	1dbb      	adds	r3, r7, #6
200005aa:	781a      	ldrb	r2, [r3, #0]
200005ac:	1dbb      	adds	r3, r7, #6
200005ae:	3201      	adds	r2, #1
200005b0:	701a      	strb	r2, [r3, #0]
200005b2:	1dbb      	adds	r3, r7, #6
200005b4:	781b      	ldrb	r3, [r3, #0]
200005b6:	2b3f      	cmp	r3, #63	; 0x3f
200005b8:	d9f2      	bls.n	200005a0 <graphic_clear_screen+0x32>
	for (char page = 0; page < 8; page++)
200005ba:	1dfb      	adds	r3, r7, #7
200005bc:	781a      	ldrb	r2, [r3, #0]
200005be:	1dfb      	adds	r3, r7, #7
200005c0:	3201      	adds	r2, #1
200005c2:	701a      	strb	r2, [r3, #0]
200005c4:	1dfb      	adds	r3, r7, #7
200005c6:	781b      	ldrb	r3, [r3, #0]
200005c8:	2b07      	cmp	r3, #7
200005ca:	d9d7      	bls.n	2000057c <graphic_clear_screen+0xe>
		}
	}
}
200005cc:	46c0      	nop			; (mov r8, r8)
200005ce:	46bd      	mov	sp, r7
200005d0:	b002      	add	sp, #8
200005d2:	bd80      	pop	{r7, pc}

200005d4 <graphic_initialize>:

void graphic_initialize (void)					//PDF
{
200005d4:	b580      	push	{r7, lr}
200005d6:	af00      	add	r7, sp, #0
		
	graphic_ctrl_bit_set(B_E);
200005d8:	2040      	movs	r0, #64	; 0x40
200005da:	f7ff fe4b 	bl	20000274 <graphic_ctrl_bit_set>
	delay_micro(10);
200005de:	200a      	movs	r0, #10
200005e0:	f7ff fe14 	bl	2000020c <delay_micro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RESET | B_E);
200005e4:	2078      	movs	r0, #120	; 0x78
200005e6:	f7ff fe67 	bl	200002b8 <graphic_ctrl_bit_clear>
	delay_milli(30);
200005ea:	201e      	movs	r0, #30
200005ec:	f7ff fe30 	bl	20000250 <delay_milli>
	graphic_ctrl_bit_set(B_RESET);
200005f0:	2020      	movs	r0, #32
200005f2:	f7ff fe3f 	bl	20000274 <graphic_ctrl_bit_set>
	delay_milli(100);
200005f6:	2064      	movs	r0, #100	; 0x64
200005f8:	f7ff fe2a 	bl	20000250 <delay_milli>
	graphic_write_command (LCD_OFF,						B_CS1 | B_CS2);
200005fc:	2118      	movs	r1, #24
200005fe:	203e      	movs	r0, #62	; 0x3e
20000600:	f7ff ff72 	bl	200004e8 <graphic_write_command>
	graphic_write_command (LCD_ON,						B_CS1 | B_CS2);			//toggla display
20000604:	2118      	movs	r1, #24
20000606:	203f      	movs	r0, #63	; 0x3f
20000608:	f7ff ff6e 	bl	200004e8 <graphic_write_command>
	graphic_write_command (LCD_DISP_START,				B_CS1 | B_CS2);			//start = 0
2000060c:	2118      	movs	r1, #24
2000060e:	20c0      	movs	r0, #192	; 0xc0
20000610:	f7ff ff6a 	bl	200004e8 <graphic_write_command>
	graphic_write_command (LCD_SET_ADD,					B_CS1 | B_CS2);			//add = 0
20000614:	2118      	movs	r1, #24
20000616:	2040      	movs	r0, #64	; 0x40
20000618:	f7ff ff66 	bl	200004e8 <graphic_write_command>
	graphic_write_command (LCD_SET_PAGE,				B_CS1 | B_CS2);			//page = 0
2000061c:	2118      	movs	r1, #24
2000061e:	20b8      	movs	r0, #184	; 0xb8
20000620:	f7ff ff62 	bl	200004e8 <graphic_write_command>
	select_controller(0);
20000624:	2000      	movs	r0, #0
20000626:	f7ff fe6d 	bl	20000304 <select_controller>
			current_disp[i][j] = 0;
		}
	}
	 * 
	 */
}
2000062a:	46c0      	nop			; (mov r8, r8)
2000062c:	46bd      	mov	sp, r7
2000062e:	bd80      	pop	{r7, pc}

20000630 <pixel>:

void pixel (int x, int y, int set)
{
20000630:	b5b0      	push	{r4, r5, r7, lr}
20000632:	b088      	sub	sp, #32
20000634:	af00      	add	r7, sp, #0
20000636:	60f8      	str	r0, [r7, #12]
20000638:	60b9      	str	r1, [r7, #8]
2000063a:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
2000063c:	68fb      	ldr	r3, [r7, #12]
2000063e:	2b00      	cmp	r3, #0
20000640:	dc00      	bgt.n	20000644 <pixel+0x14>
20000642:	e0b6      	b.n	200007b2 <pixel+0x182>
20000644:	68bb      	ldr	r3, [r7, #8]
20000646:	2b00      	cmp	r3, #0
20000648:	dc00      	bgt.n	2000064c <pixel+0x1c>
2000064a:	e0b2      	b.n	200007b2 <pixel+0x182>
2000064c:	68fb      	ldr	r3, [r7, #12]
2000064e:	2b80      	cmp	r3, #128	; 0x80
20000650:	dd00      	ble.n	20000654 <pixel+0x24>
20000652:	e0ae      	b.n	200007b2 <pixel+0x182>
20000654:	68bb      	ldr	r3, [r7, #8]
20000656:	2b40      	cmp	r3, #64	; 0x40
20000658:	dd00      	ble.n	2000065c <pixel+0x2c>
2000065a:	e0aa      	b.n	200007b2 <pixel+0x182>
	
	index = (y-1)/8;
2000065c:	68bb      	ldr	r3, [r7, #8]
2000065e:	3b01      	subs	r3, #1
20000660:	2b00      	cmp	r3, #0
20000662:	da00      	bge.n	20000666 <pixel+0x36>
20000664:	3307      	adds	r3, #7
20000666:	10db      	asrs	r3, r3, #3
20000668:	61bb      	str	r3, [r7, #24]
	
	switch( (y-1)%8) {
2000066a:	68bb      	ldr	r3, [r7, #8]
2000066c:	3b01      	subs	r3, #1
2000066e:	4a53      	ldr	r2, [pc, #332]	; (200007bc <pixel+0x18c>)
20000670:	4013      	ands	r3, r2
20000672:	d504      	bpl.n	2000067e <pixel+0x4e>
20000674:	3b01      	subs	r3, #1
20000676:	2208      	movs	r2, #8
20000678:	4252      	negs	r2, r2
2000067a:	4313      	orrs	r3, r2
2000067c:	3301      	adds	r3, #1
2000067e:	2b07      	cmp	r3, #7
20000680:	d82c      	bhi.n	200006dc <pixel+0xac>
20000682:	009a      	lsls	r2, r3, #2
20000684:	4b4e      	ldr	r3, [pc, #312]	; (200007c0 <pixel+0x190>)
20000686:	18d3      	adds	r3, r2, r3
20000688:	681b      	ldr	r3, [r3, #0]
2000068a:	469f      	mov	pc, r3
		case 0: mask = 1; break;
2000068c:	231f      	movs	r3, #31
2000068e:	18fb      	adds	r3, r7, r3
20000690:	2201      	movs	r2, #1
20000692:	701a      	strb	r2, [r3, #0]
20000694:	e022      	b.n	200006dc <pixel+0xac>
		case 1: mask = 2; break;
20000696:	231f      	movs	r3, #31
20000698:	18fb      	adds	r3, r7, r3
2000069a:	2202      	movs	r2, #2
2000069c:	701a      	strb	r2, [r3, #0]
2000069e:	e01d      	b.n	200006dc <pixel+0xac>
		case 2: mask = 4; break;
200006a0:	231f      	movs	r3, #31
200006a2:	18fb      	adds	r3, r7, r3
200006a4:	2204      	movs	r2, #4
200006a6:	701a      	strb	r2, [r3, #0]
200006a8:	e018      	b.n	200006dc <pixel+0xac>
		case 3: mask = 8; break;
200006aa:	231f      	movs	r3, #31
200006ac:	18fb      	adds	r3, r7, r3
200006ae:	2208      	movs	r2, #8
200006b0:	701a      	strb	r2, [r3, #0]
200006b2:	e013      	b.n	200006dc <pixel+0xac>
		case 4: mask = 0x10; break;
200006b4:	231f      	movs	r3, #31
200006b6:	18fb      	adds	r3, r7, r3
200006b8:	2210      	movs	r2, #16
200006ba:	701a      	strb	r2, [r3, #0]
200006bc:	e00e      	b.n	200006dc <pixel+0xac>
		case 5: mask = 0x20; break;
200006be:	231f      	movs	r3, #31
200006c0:	18fb      	adds	r3, r7, r3
200006c2:	2220      	movs	r2, #32
200006c4:	701a      	strb	r2, [r3, #0]
200006c6:	e009      	b.n	200006dc <pixel+0xac>
		case 6: mask = 0x40; break;
200006c8:	231f      	movs	r3, #31
200006ca:	18fb      	adds	r3, r7, r3
200006cc:	2240      	movs	r2, #64	; 0x40
200006ce:	701a      	strb	r2, [r3, #0]
200006d0:	e004      	b.n	200006dc <pixel+0xac>
		case 7: mask = 0x80; break;
200006d2:	231f      	movs	r3, #31
200006d4:	18fb      	adds	r3, r7, r3
200006d6:	2280      	movs	r2, #128	; 0x80
200006d8:	701a      	strb	r2, [r3, #0]
200006da:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0){
200006dc:	687b      	ldr	r3, [r7, #4]
200006de:	2b00      	cmp	r3, #0
200006e0:	d105      	bne.n	200006ee <pixel+0xbe>
		mask = ~mask;
200006e2:	221f      	movs	r2, #31
200006e4:	18bb      	adds	r3, r7, r2
200006e6:	18ba      	adds	r2, r7, r2
200006e8:	7812      	ldrb	r2, [r2, #0]
200006ea:	43d2      	mvns	r2, r2
200006ec:	701a      	strb	r2, [r3, #0]
	}
	if(x > 64){
200006ee:	68fb      	ldr	r3, [r7, #12]
200006f0:	2b40      	cmp	r3, #64	; 0x40
200006f2:	dd07      	ble.n	20000704 <pixel+0xd4>
		controller = B_CS2;
200006f4:	231e      	movs	r3, #30
200006f6:	18fb      	adds	r3, r7, r3
200006f8:	2210      	movs	r2, #16
200006fa:	701a      	strb	r2, [r3, #0]
		x = x-65;
200006fc:	68fb      	ldr	r3, [r7, #12]
200006fe:	3b41      	subs	r3, #65	; 0x41
20000700:	60fb      	str	r3, [r7, #12]
20000702:	e006      	b.n	20000712 <pixel+0xe2>
	} else {
		controller = B_CS1;
20000704:	231e      	movs	r3, #30
20000706:	18fb      	adds	r3, r7, r3
20000708:	2208      	movs	r2, #8
2000070a:	701a      	strb	r2, [r3, #0]
		x = x-1;
2000070c:	68fb      	ldr	r3, [r7, #12]
2000070e:	3b01      	subs	r3, #1
20000710:	60fb      	str	r3, [r7, #12]
	}
	
	graphic_write_command(LCD_SET_ADD | x, controller);
20000712:	68fb      	ldr	r3, [r7, #12]
20000714:	b25b      	sxtb	r3, r3
20000716:	2240      	movs	r2, #64	; 0x40
20000718:	4313      	orrs	r3, r2
2000071a:	b25b      	sxtb	r3, r3
2000071c:	b2da      	uxtb	r2, r3
2000071e:	251e      	movs	r5, #30
20000720:	197b      	adds	r3, r7, r5
20000722:	781b      	ldrb	r3, [r3, #0]
20000724:	0019      	movs	r1, r3
20000726:	0010      	movs	r0, r2
20000728:	f7ff fede 	bl	200004e8 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
2000072c:	69bb      	ldr	r3, [r7, #24]
2000072e:	b25b      	sxtb	r3, r3
20000730:	2248      	movs	r2, #72	; 0x48
20000732:	4252      	negs	r2, r2
20000734:	4313      	orrs	r3, r2
20000736:	b25b      	sxtb	r3, r3
20000738:	b2da      	uxtb	r2, r3
2000073a:	197b      	adds	r3, r7, r5
2000073c:	781b      	ldrb	r3, [r3, #0]
2000073e:	0019      	movs	r1, r3
20000740:	0010      	movs	r0, r2
20000742:	f7ff fed1 	bl	200004e8 <graphic_write_command>
	c = graphic_read_data(controller);
20000746:	2317      	movs	r3, #23
20000748:	18fc      	adds	r4, r7, r3
2000074a:	197b      	adds	r3, r7, r5
2000074c:	781b      	ldrb	r3, [r3, #0]
2000074e:	0018      	movs	r0, r3
20000750:	f7ff fe7e 	bl	20000450 <graphic_read_data>
20000754:	0003      	movs	r3, r0
20000756:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x, controller);
20000758:	68fb      	ldr	r3, [r7, #12]
2000075a:	b25b      	sxtb	r3, r3
2000075c:	2240      	movs	r2, #64	; 0x40
2000075e:	4313      	orrs	r3, r2
20000760:	b25b      	sxtb	r3, r3
20000762:	b2da      	uxtb	r2, r3
20000764:	197b      	adds	r3, r7, r5
20000766:	781b      	ldrb	r3, [r3, #0]
20000768:	0019      	movs	r1, r3
2000076a:	0010      	movs	r0, r2
2000076c:	f7ff febc 	bl	200004e8 <graphic_write_command>
	
	if(set)
20000770:	687b      	ldr	r3, [r7, #4]
20000772:	2b00      	cmp	r3, #0
20000774:	d009      	beq.n	2000078a <pixel+0x15a>
	{
		mask = mask | c;
20000776:	221f      	movs	r2, #31
20000778:	18bb      	adds	r3, r7, r2
2000077a:	18b9      	adds	r1, r7, r2
2000077c:	2217      	movs	r2, #23
2000077e:	18ba      	adds	r2, r7, r2
20000780:	7809      	ldrb	r1, [r1, #0]
20000782:	7812      	ldrb	r2, [r2, #0]
20000784:	430a      	orrs	r2, r1
20000786:	701a      	strb	r2, [r3, #0]
20000788:	e008      	b.n	2000079c <pixel+0x16c>
	} else {
		mask = mask & c;
2000078a:	221f      	movs	r2, #31
2000078c:	18bb      	adds	r3, r7, r2
2000078e:	18ba      	adds	r2, r7, r2
20000790:	2117      	movs	r1, #23
20000792:	1879      	adds	r1, r7, r1
20000794:	7812      	ldrb	r2, [r2, #0]
20000796:	7809      	ldrb	r1, [r1, #0]
20000798:	400a      	ands	r2, r1
2000079a:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_data(mask, controller);
2000079c:	231e      	movs	r3, #30
2000079e:	18fb      	adds	r3, r7, r3
200007a0:	781a      	ldrb	r2, [r3, #0]
200007a2:	231f      	movs	r3, #31
200007a4:	18fb      	adds	r3, r7, r3
200007a6:	781b      	ldrb	r3, [r3, #0]
200007a8:	0011      	movs	r1, r2
200007aa:	0018      	movs	r0, r3
200007ac:	f7ff febc 	bl	20000528 <graphic_write_data>
200007b0:	e000      	b.n	200007b4 <pixel+0x184>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
200007b2:	46c0      	nop			; (mov r8, r8)
	
}
200007b4:	46bd      	mov	sp, r7
200007b6:	b008      	add	sp, #32
200007b8:	bdb0      	pop	{r4, r5, r7, pc}
200007ba:	46c0      	nop			; (mov r8, r8)
200007bc:	80000007 	andhi	r0, r0, r7
200007c0:	20000994 	mulcs	r0, r4, r9

200007c4 <init_app>:

void init_app(void)
{
200007c4:	b580      	push	{r7, lr}
200007c6:	af00      	add	r7, sp, #0
	*portModer = 0x55555555; // PortE Output (bit 15-0)
200007c8:	4b05      	ldr	r3, [pc, #20]	; (200007e0 <init_app+0x1c>)
200007ca:	4a06      	ldr	r2, [pc, #24]	; (200007e4 <init_app+0x20>)
200007cc:	601a      	str	r2, [r3, #0]
	*portOtyper = 0x00000000;
200007ce:	4b06      	ldr	r3, [pc, #24]	; (200007e8 <init_app+0x24>)
200007d0:	2200      	movs	r2, #0
200007d2:	801a      	strh	r2, [r3, #0]
	*portOpupdr = 0x00000000;
200007d4:	4b05      	ldr	r3, [pc, #20]	; (200007ec <init_app+0x28>)
200007d6:	2200      	movs	r2, #0
200007d8:	601a      	str	r2, [r3, #0]
}
200007da:	46c0      	nop			; (mov r8, r8)
200007dc:	46bd      	mov	sp, r7
200007de:	bd80      	pop	{r7, pc}
200007e0:	40021000 	andmi	r1, r2, r0
200007e4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
200007e8:	40021004 	andmi	r1, r2, r4
200007ec:	4002100c 	andmi	r1, r2, ip

200007f0 <main>:
void main(void)
{
200007f0:	b580      	push	{r7, lr}
200007f2:	b082      	sub	sp, #8
200007f4:	af00      	add	r7, sp, #0
 	POBJECT p = &ball;
200007f6:	4b0a      	ldr	r3, [pc, #40]	; (20000820 <main+0x30>)
200007f8:	607b      	str	r3, [r7, #4]
	init_app();
200007fa:	f7ff ffe3 	bl	200007c4 <init_app>
	graphic_initialize();
200007fe:	f7ff fee9 	bl	200005d4 <graphic_initialize>
	#ifndef SIMULATOR
	graphic_clear_screen();
	#endif
	
	p->set_speed(p, 4 ,1);
20000802:	687b      	ldr	r3, [r7, #4]
20000804:	6a1b      	ldr	r3, [r3, #32]
20000806:	6878      	ldr	r0, [r7, #4]
20000808:	2201      	movs	r2, #1
2000080a:	2104      	movs	r1, #4
2000080c:	4798      	blx	r3
	while(1)
	{
		p->move(p);
2000080e:	687b      	ldr	r3, [r7, #4]
20000810:	69db      	ldr	r3, [r3, #28]
20000812:	687a      	ldr	r2, [r7, #4]
20000814:	0010      	movs	r0, r2
20000816:	4798      	blx	r3
		delay_milli(40);
20000818:	2028      	movs	r0, #40	; 0x28
2000081a:	f7ff fd19 	bl	20000250 <delay_milli>
		p->move(p);
2000081e:	e7f6      	b.n	2000080e <main+0x1e>
20000820:	20000970 	andcs	r0, r0, r0, ror r9

20000824 <__udivsi3>:
20000824:	2200      	movs	r2, #0
20000826:	0843      	lsrs	r3, r0, #1
20000828:	428b      	cmp	r3, r1
2000082a:	d374      	bcc.n	20000916 <__udivsi3+0xf2>
2000082c:	0903      	lsrs	r3, r0, #4
2000082e:	428b      	cmp	r3, r1
20000830:	d35f      	bcc.n	200008f2 <__udivsi3+0xce>
20000832:	0a03      	lsrs	r3, r0, #8
20000834:	428b      	cmp	r3, r1
20000836:	d344      	bcc.n	200008c2 <__udivsi3+0x9e>
20000838:	0b03      	lsrs	r3, r0, #12
2000083a:	428b      	cmp	r3, r1
2000083c:	d328      	bcc.n	20000890 <__udivsi3+0x6c>
2000083e:	0c03      	lsrs	r3, r0, #16
20000840:	428b      	cmp	r3, r1
20000842:	d30d      	bcc.n	20000860 <__udivsi3+0x3c>
20000844:	22ff      	movs	r2, #255	; 0xff
20000846:	0209      	lsls	r1, r1, #8
20000848:	ba12      	rev	r2, r2
2000084a:	0c03      	lsrs	r3, r0, #16
2000084c:	428b      	cmp	r3, r1
2000084e:	d302      	bcc.n	20000856 <__udivsi3+0x32>
20000850:	1212      	asrs	r2, r2, #8
20000852:	0209      	lsls	r1, r1, #8
20000854:	d065      	beq.n	20000922 <__udivsi3+0xfe>
20000856:	0b03      	lsrs	r3, r0, #12
20000858:	428b      	cmp	r3, r1
2000085a:	d319      	bcc.n	20000890 <__udivsi3+0x6c>
2000085c:	e000      	b.n	20000860 <__udivsi3+0x3c>
2000085e:	0a09      	lsrs	r1, r1, #8
20000860:	0bc3      	lsrs	r3, r0, #15
20000862:	428b      	cmp	r3, r1
20000864:	d301      	bcc.n	2000086a <__udivsi3+0x46>
20000866:	03cb      	lsls	r3, r1, #15
20000868:	1ac0      	subs	r0, r0, r3
2000086a:	4152      	adcs	r2, r2
2000086c:	0b83      	lsrs	r3, r0, #14
2000086e:	428b      	cmp	r3, r1
20000870:	d301      	bcc.n	20000876 <__udivsi3+0x52>
20000872:	038b      	lsls	r3, r1, #14
20000874:	1ac0      	subs	r0, r0, r3
20000876:	4152      	adcs	r2, r2
20000878:	0b43      	lsrs	r3, r0, #13
2000087a:	428b      	cmp	r3, r1
2000087c:	d301      	bcc.n	20000882 <__udivsi3+0x5e>
2000087e:	034b      	lsls	r3, r1, #13
20000880:	1ac0      	subs	r0, r0, r3
20000882:	4152      	adcs	r2, r2
20000884:	0b03      	lsrs	r3, r0, #12
20000886:	428b      	cmp	r3, r1
20000888:	d301      	bcc.n	2000088e <__udivsi3+0x6a>
2000088a:	030b      	lsls	r3, r1, #12
2000088c:	1ac0      	subs	r0, r0, r3
2000088e:	4152      	adcs	r2, r2
20000890:	0ac3      	lsrs	r3, r0, #11
20000892:	428b      	cmp	r3, r1
20000894:	d301      	bcc.n	2000089a <__udivsi3+0x76>
20000896:	02cb      	lsls	r3, r1, #11
20000898:	1ac0      	subs	r0, r0, r3
2000089a:	4152      	adcs	r2, r2
2000089c:	0a83      	lsrs	r3, r0, #10
2000089e:	428b      	cmp	r3, r1
200008a0:	d301      	bcc.n	200008a6 <__udivsi3+0x82>
200008a2:	028b      	lsls	r3, r1, #10
200008a4:	1ac0      	subs	r0, r0, r3
200008a6:	4152      	adcs	r2, r2
200008a8:	0a43      	lsrs	r3, r0, #9
200008aa:	428b      	cmp	r3, r1
200008ac:	d301      	bcc.n	200008b2 <__udivsi3+0x8e>
200008ae:	024b      	lsls	r3, r1, #9
200008b0:	1ac0      	subs	r0, r0, r3
200008b2:	4152      	adcs	r2, r2
200008b4:	0a03      	lsrs	r3, r0, #8
200008b6:	428b      	cmp	r3, r1
200008b8:	d301      	bcc.n	200008be <__udivsi3+0x9a>
200008ba:	020b      	lsls	r3, r1, #8
200008bc:	1ac0      	subs	r0, r0, r3
200008be:	4152      	adcs	r2, r2
200008c0:	d2cd      	bcs.n	2000085e <__udivsi3+0x3a>
200008c2:	09c3      	lsrs	r3, r0, #7
200008c4:	428b      	cmp	r3, r1
200008c6:	d301      	bcc.n	200008cc <__udivsi3+0xa8>
200008c8:	01cb      	lsls	r3, r1, #7
200008ca:	1ac0      	subs	r0, r0, r3
200008cc:	4152      	adcs	r2, r2
200008ce:	0983      	lsrs	r3, r0, #6
200008d0:	428b      	cmp	r3, r1
200008d2:	d301      	bcc.n	200008d8 <__udivsi3+0xb4>
200008d4:	018b      	lsls	r3, r1, #6
200008d6:	1ac0      	subs	r0, r0, r3
200008d8:	4152      	adcs	r2, r2
200008da:	0943      	lsrs	r3, r0, #5
200008dc:	428b      	cmp	r3, r1
200008de:	d301      	bcc.n	200008e4 <__udivsi3+0xc0>
200008e0:	014b      	lsls	r3, r1, #5
200008e2:	1ac0      	subs	r0, r0, r3
200008e4:	4152      	adcs	r2, r2
200008e6:	0903      	lsrs	r3, r0, #4
200008e8:	428b      	cmp	r3, r1
200008ea:	d301      	bcc.n	200008f0 <__udivsi3+0xcc>
200008ec:	010b      	lsls	r3, r1, #4
200008ee:	1ac0      	subs	r0, r0, r3
200008f0:	4152      	adcs	r2, r2
200008f2:	08c3      	lsrs	r3, r0, #3
200008f4:	428b      	cmp	r3, r1
200008f6:	d301      	bcc.n	200008fc <__udivsi3+0xd8>
200008f8:	00cb      	lsls	r3, r1, #3
200008fa:	1ac0      	subs	r0, r0, r3
200008fc:	4152      	adcs	r2, r2
200008fe:	0883      	lsrs	r3, r0, #2
20000900:	428b      	cmp	r3, r1
20000902:	d301      	bcc.n	20000908 <__udivsi3+0xe4>
20000904:	008b      	lsls	r3, r1, #2
20000906:	1ac0      	subs	r0, r0, r3
20000908:	4152      	adcs	r2, r2
2000090a:	0843      	lsrs	r3, r0, #1
2000090c:	428b      	cmp	r3, r1
2000090e:	d301      	bcc.n	20000914 <__udivsi3+0xf0>
20000910:	004b      	lsls	r3, r1, #1
20000912:	1ac0      	subs	r0, r0, r3
20000914:	4152      	adcs	r2, r2
20000916:	1a41      	subs	r1, r0, r1
20000918:	d200      	bcs.n	2000091c <__udivsi3+0xf8>
2000091a:	4601      	mov	r1, r0
2000091c:	4152      	adcs	r2, r2
2000091e:	4610      	mov	r0, r2
20000920:	4770      	bx	lr
20000922:	e7ff      	b.n	20000924 <__udivsi3+0x100>
20000924:	b501      	push	{r0, lr}
20000926:	2000      	movs	r0, #0
20000928:	f000 f806 	bl	20000938 <__aeabi_idiv0>
2000092c:	bd02      	pop	{r1, pc}
2000092e:	46c0      	nop			; (mov r8, r8)

20000930 <__aeabi_uidivmod>:
20000930:	2900      	cmp	r1, #0
20000932:	d0f7      	beq.n	20000924 <__udivsi3+0x100>
20000934:	e776      	b.n	20000824 <__udivsi3>
20000936:	4770      	bx	lr

20000938 <__aeabi_idiv0>:
20000938:	4770      	bx	lr
2000093a:	46c0      	nop			; (mov r8, r8)

2000093c <ball_geometry>:
2000093c:	0000000c 	andeq	r0, r0, ip
20000940:	00000004 	andeq	r0, r0, r4
20000944:	00000004 	andeq	r0, r0, r4
20000948:	02000100 	andeq	r0, r0, #0, 2
2000094c:	01010001 	tsteq	r1, r1
20000950:	03010201 	movweq	r0, #4609	; 0x1201
20000954:	01020002 	tsteq	r2, r2
20000958:	03020202 	movweq	r0, #8706	; 0x2202
2000095c:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000970 <ball>:
20000970:	2000093c 	andcs	r0, r0, ip, lsr r9
	...
2000097c:	00000001 	andeq	r0, r0, r1
20000980:	00000001 	andeq	r0, r0, r1
20000984:	20000031 	andcs	r0, r0, r1, lsr r0
20000988:	20000091 	mulcs	r0, r1, r0
2000098c:	200000f1 	strdcs	r0, [r0], -r1
20000990:	20000011 	andcs	r0, r0, r1, lsl r0
20000994:	2000068c 	andcs	r0, r0, ip, lsl #13
20000998:	20000696 	mulcs	r0, r6, r6
2000099c:	200006a0 	andcs	r0, r0, r0, lsr #13
200009a0:	200006aa 	andcs	r0, r0, sl, lsr #13
200009a4:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
200009a8:	200006be 			; <UNDEFINED> instruction: 0x200006be
200009ac:	200006c8 	andcs	r0, r0, r8, asr #13
200009b0:	200006d2 	ldrdcs	r0, [r0], -r2

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000005e1 	andeq	r0, r0, r1, ror #11
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000006c 	andeq	r0, r0, ip, rrx
  10:	00010b0c 	andeq	r0, r1, ip, lsl #22
	...
  24:	02010200 	andeq	r0, r1, #0, 4
  28:	2c010000 	stccs	0, cr0, [r1], {-0}
  2c:	00000030 	andeq	r0, r0, r0, lsr r0
  30:	3f080103 	svccc	0x00080103
  34:	04000001 	streq	r0, [r0], #-1
  38:	00000104 	andeq	r0, r0, r4, lsl #2
  3c:	582e0102 	stmdapl	lr!, {r1, r8}
  40:	05000000 	streq	r0, [r0, #-0]
  44:	30010078 	andcc	r0, r1, r8, ror r0
  48:	00000030 	andeq	r0, r0, r0, lsr r0
  4c:	00790500 	rsbseq	r0, r9, r0, lsl #10
  50:	00303101 	eorseq	r3, r0, r1, lsl #2
  54:	00010000 	andeq	r0, r1, r0
  58:	00022902 	andeq	r2, r2, r2, lsl #18
  5c:	37320100 	ldrcc	r0, [r2, -r0, lsl #2]!
  60:	04000000 	streq	r0, [r0], #-0
  64:	000001e7 	andeq	r0, r0, r7, ror #3
  68:	9f340134 	svcls	0x00340134
  6c:	06000000 	streq	r0, [r0], -r0
  70:	000002d2 	ldrdeq	r0, [r0], -r2
  74:	009f3601 	addseq	r3, pc, r1, lsl #12
  78:	06000000 	streq	r0, [r0], -r0
  7c:	00000209 	andeq	r0, r0, r9, lsl #4
  80:	009f3701 	addseq	r3, pc, r1, lsl #14
  84:	06040000 	streq	r0, [r4], -r0
  88:	0000020f 	andeq	r0, r0, pc, lsl #4
  8c:	009f3801 	addseq	r3, pc, r1, lsl #16
  90:	05080000 	streq	r0, [r8, #-0]
  94:	01007870 	tsteq	r0, r0, ror r8
  98:	0000a639 	andeq	sl, r0, r9, lsr r6
  9c:	07000c00 	streq	r0, [r0, -r0, lsl #24]
  a0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
  a4:	58080074 	stmdapl	r8, {r2, r4, r5, r6}
  a8:	b6000000 	strlt	r0, [r0], -r0
  ac:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
  b0:	000000b6 	strheq	r0, [r0], -r6
  b4:	04030013 	streq	r0, [r3], #-19	; 0xffffffed
  b8:	0001da07 	andeq	sp, r1, r7, lsl #20
  bc:	02b00200 	adcseq	r0, r0, #0, 4
  c0:	3a010000 	bcc	400c8 <startup-0x1ffbff38>
  c4:	00000063 	andeq	r0, r0, r3, rrx
  c8:	0002af02 	andeq	sl, r2, r2, lsl #30
  cc:	d33a0100 	teqle	sl, #0, 2
  d0:	0a000000 	beq	d8 <startup-0x1fffff28>
  d4:	00006304 	andeq	r6, r0, r4, lsl #6
  d8:	01610b00 	cmneq	r1, r0, lsl #22
  dc:	3c010000 	stccc	0, cr0, [r1], {-0}
  e0:	000000bd 	strheq	r0, [r0], -sp
  e4:	093c0305 	ldmdbeq	ip!, {r0, r2, r8, r9}
  e8:	36042000 	strcc	r2, [r4], -r0
  ec:	24000000 	strcs	r0, [r0], #-0
  f0:	01634601 	cmneq	r3, r1, lsl #12
  f4:	67050000 	strvs	r0, [r5, -r0]
  f8:	01006f65 	tsteq	r0, r5, ror #30
  fc:	0000c848 	andeq	ip, r0, r8, asr #16
 100:	52060000 	andpl	r0, r6, #0
 104:	01000000 	mrseq	r0, (UNDEF: 0)
 108:	00009f49 	andeq	r9, r0, r9, asr #30
 10c:	57060400 	strpl	r0, [r6, -r0, lsl #8]
 110:	01000000 	mrseq	r0, (UNDEF: 0)
 114:	00009f49 	andeq	r9, r0, r9, asr #30
 118:	57060800 	strpl	r0, [r6, -r0, lsl #16]
 11c:	01000001 	tsteq	r0, r1
 120:	00009f4a 	andeq	r9, r0, sl, asr #30
 124:	5c060c00 	stcpl	12, cr0, [r6], {-0}
 128:	01000001 	tsteq	r0, r1
 12c:	00009f4a 	andeq	r9, r0, sl, asr #30
 130:	2f061000 	svccs	0x00061000
 134:	01000002 	tsteq	r0, r2
 138:	0001744b 	andeq	r7, r1, fp, asr #8
 13c:	bf061400 	svclt	0x00061400
 140:	01000001 	tsteq	r0, r1
 144:	0001744c 	andeq	r7, r1, ip, asr #8
 148:	3b061800 	blcc	186150 <startup-0x1fe79eb0>
 14c:	01000000 	mrseq	r0, (UNDEF: 0)
 150:	0001744d 	andeq	r7, r1, sp, asr #8
 154:	4d061c00 	stcmi	12, cr1, [r6, #-0]
 158:	01000001 	tsteq	r0, r1
 15c:	00018f4e 	andeq	r8, r1, lr, asr #30
 160:	0c002000 	stceq	0, cr2, [r0], {-0}
 164:	0000016e 	andeq	r0, r0, lr, ror #2
 168:	00016e0d 	andeq	r6, r1, sp, lsl #28
 16c:	040a0000 	streq	r0, [sl], #-0
 170:	000000ea 	andeq	r0, r0, sl, ror #1
 174:	0163040a 	cmneq	r3, sl, lsl #8
 178:	8f0c0000 	svchi	0x000c0000
 17c:	0d000001 	stceq	0, cr0, [r0, #-4]
 180:	0000016e 	andeq	r0, r0, lr, ror #2
 184:	00009f0d 	andeq	r9, r0, sp, lsl #30
 188:	009f0d00 	addseq	r0, pc, r0, lsl #26
 18c:	0a000000 	beq	194 <startup-0x1ffffe6c>
 190:	00017a04 	andeq	r7, r1, r4, lsl #20
 194:	03060200 	movweq	r0, #25088	; 0x6200
 198:	4f010000 	svcmi	0x00010000
 19c:	000000ea 	andeq	r0, r0, sl, ror #1
 1a0:	00030502 	andeq	r0, r3, r2, lsl #10
 1a4:	6e4f0100 	dvfvse	f0, f7, f0
 1a8:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 1ac:	00000062 	andeq	r0, r0, r2, rrx
 1b0:	01958501 	orrseq	r8, r5, r1, lsl #10
 1b4:	03050000 	movweq	r0, #20480	; 0x5000
 1b8:	20000970 	andcs	r0, r0, r0, ror r9
 1bc:	0001960f 	andeq	r9, r1, pc, lsl #12
 1c0:	01ae0100 			; <UNDEFINED> instruction: 0x01ae0100
 1c4:	200007f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 1c8:	00000034 	andeq	r0, r0, r4, lsr r0
 1cc:	01e09c01 	mvneq	r9, r1, lsl #24
 1d0:	70100000 	andsvc	r0, r0, r0
 1d4:	01b00100 	lslseq	r0, r0, #2
 1d8:	000001a0 	andeq	r0, r0, r0, lsr #3
 1dc:	00749102 	rsbseq	r9, r4, r2, lsl #2
 1e0:	0001f811 	andeq	pc, r1, r1, lsl r8	; <UNPREDICTABLE>
 1e4:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
 1e8:	200007c4 	andcs	r0, r0, r4, asr #15
 1ec:	0000002c 	andeq	r0, r0, ip, lsr #32
 1f0:	5c0f9c01 	stcpl	12, cr9, [pc], {1}
 1f4:	01000000 	mrseq	r0, (UNDEF: 0)
 1f8:	06300179 			; <UNDEFINED> instruction: 0x06300179
 1fc:	01942000 	orrseq	r2, r4, r0
 200:	9c010000 	stcls	0, cr0, [r1], {-0}
 204:	0000026c 	andeq	r0, r0, ip, ror #4
 208:	01007812 	tsteq	r0, r2, lsl r8
 20c:	009f0179 	addseq	r0, pc, r9, ror r1	; <UNPREDICTABLE>
 210:	91020000 	mrsls	r0, (UNDEF: 2)
 214:	0079125c 	rsbseq	r1, r9, ip, asr r2
 218:	9f017901 	svcls	0x00017901
 21c:	02000000 	andeq	r0, r0, #0
 220:	73125891 	tstvc	r2, #9502720	; 0x910000
 224:	01007465 	tsteq	r0, r5, ror #8
 228:	009f0179 	addseq	r0, pc, r9, ror r1	; <UNPREDICTABLE>
 22c:	91020000 	mrsls	r0, (UNDEF: 2)
 230:	02341354 	eorseq	r1, r4, #84, 6	; 0x50000001
 234:	7b010000 	blvc	4023c <startup-0x1ffbfdc4>
 238:	00002501 	andeq	r2, r0, r1, lsl #10
 23c:	6f910200 	svcvs	0x00910200
 240:	01006310 	tsteq	r0, r0, lsl r3
 244:	0025017b 	eoreq	r0, r5, fp, ror r1
 248:	91020000 	mrsls	r0, (UNDEF: 2)
 24c:	00471367 	subeq	r1, r7, r7, ror #6
 250:	7b010000 	blvc	40258 <startup-0x1ffbfda8>
 254:	00002501 	andeq	r2, r0, r1, lsl #10
 258:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
 25c:	00023913 	andeq	r3, r2, r3, lsl r9
 260:	017c0100 	cmneq	ip, r0, lsl #2
 264:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 268:	00689102 	rsbeq	r9, r8, r2, lsl #2
 26c:	00019b14 	andeq	r9, r1, r4, lsl fp
 270:	015d0100 	cmpeq	sp, r0, lsl #2
 274:	200005d4 	ldrdcs	r0, [r0], -r4
 278:	0000005c 	andeq	r0, r0, ip, asr r0
 27c:	8e0f9c01 	cdphi	12, 0, cr9, cr15, cr1, {0}
 280:	01000002 	tsteq	r0, r2
 284:	056e014f 	strbeq	r0, [lr, #-335]!	; 0xfffffeb1
 288:	00662000 	rsbeq	r2, r6, r0
 28c:	9c010000 	stcls	0, cr0, [r1], {-0}
 290:	000002c7 	andeq	r0, r0, r7, asr #5
 294:	00057415 	andeq	r7, r5, r5, lsl r4
 298:	00005820 	andeq	r5, r0, r0, lsr #16
 29c:	00671300 	rsbeq	r1, r7, r0, lsl #6
 2a0:	51010000 	mrspl	r0, (UNDEF: 1)
 2a4:	0002c701 	andeq	ip, r2, r1, lsl #14
 2a8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 2ac:	00059815 	andeq	r9, r5, r5, lsl r8
 2b0:	00002220 	andeq	r2, r0, r0, lsr #4
 2b4:	64611000 	strbtvs	r1, [r1], #-0
 2b8:	56010064 	strpl	r0, [r1], -r4, rrx
 2bc:	0002c701 	andeq	ip, r2, r1, lsl #14
 2c0:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 2c4:	03000000 	movweq	r0, #0
 2c8:	01480801 	cmpeq	r8, r1, lsl #16
 2cc:	57160000 	ldrpl	r0, [r6, -r0]
 2d0:	01000002 	tsteq	r0, r2
 2d4:	05280146 	streq	r0, [r8, #-326]!	; 0xfffffeba
 2d8:	00462000 	subeq	r2, r6, r0
 2dc:	9c010000 	stcls	0, cr0, [r1], {-0}
 2e0:	00000303 	andeq	r0, r0, r3, lsl #6
 2e4:	00025217 	andeq	r5, r2, r7, lsl r2
 2e8:	01460100 	mrseq	r0, (UNDEF: 86)
 2ec:	00000025 	andeq	r0, r0, r5, lsr #32
 2f0:	17779102 	ldrbne	r9, [r7, -r2, lsl #2]!
 2f4:	00000047 	andeq	r0, r0, r7, asr #32
 2f8:	25014601 	strcs	r4, [r1, #-1537]	; 0xfffff9ff
 2fc:	02000000 	andeq	r0, r0, #0
 300:	16007691 			; <UNDEFINED> instruction: 0x16007691
 304:	000002e8 	andeq	r0, r0, r8, ror #5
 308:	e8013e01 	stmda	r1, {r0, r9, sl, fp, ip, sp}
 30c:	40200004 	eormi	r0, r0, r4
 310:	01000000 	mrseq	r0, (UNDEF: 0)
 314:	0003389c 	muleq	r3, ip, r8
 318:	02f61700 	rscseq	r1, r6, #0, 14
 31c:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
 320:	00002501 	andeq	r2, r0, r1, lsl #10
 324:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 328:	00004717 	andeq	r4, r0, r7, lsl r7
 32c:	013e0100 	teqeq	lr, r0, lsl #2
 330:	00000025 	andeq	r0, r0, r5, lsr #32
 334:	00769102 	rsbseq	r9, r6, r2, lsl #2
 338:	00016f16 	andeq	r6, r1, r6, lsl pc
 33c:	01250100 			; <UNDEFINED> instruction: 0x01250100
 340:	2000047a 	andcs	r0, r0, sl, ror r4
 344:	0000006e 	andeq	r0, r0, lr, rrx
 348:	036d9c01 	cmneq	sp, #256	; 0x100
 34c:	3f170000 	svccc	0x00170000
 350:	01000002 	tsteq	r0, r2
 354:	00250125 	eoreq	r0, r5, r5, lsr #2
 358:	91020000 	mrsls	r0, (UNDEF: 2)
 35c:	00471777 	subeq	r1, r7, r7, ror r7
 360:	25010000 	strcs	r0, [r1, #-0]
 364:	00002501 	andeq	r2, r0, r1, lsl #10
 368:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 36c:	02451800 	subeq	r1, r5, #0, 16
 370:	1f010000 	svcne	0x00010000
 374:	00002501 	andeq	r2, r0, r1, lsl #10
 378:	00045000 	andeq	r5, r4, r0
 37c:	00002a20 	andeq	r2, r0, r0, lsr #20
 380:	979c0100 	ldrls	r0, [ip, r0, lsl #2]
 384:	17000003 	strne	r0, [r0, -r3]
 388:	00000047 	andeq	r0, r0, r7, asr #32
 38c:	25011f01 	strcs	r1, [r1, #-3841]	; 0xfffff0ff
 390:	02000000 	andeq	r0, r0, #0
 394:	18007791 	stmdane	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 398:	000002c5 	andeq	r0, r0, r5, asr #5
 39c:	25010501 	strcs	r0, [r1, #-1281]	; 0xfffffaff
 3a0:	cc000000 	stcgt	0, cr0, [r0], {-0}
 3a4:	84200003 	strthi	r0, [r0], #-3
 3a8:	01000000 	mrseq	r0, (UNDEF: 0)
 3ac:	0003cf9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
 3b0:	00471700 	subeq	r1, r7, r0, lsl #14
 3b4:	05010000 	streq	r0, [r1, #-0]
 3b8:	00002501 	andeq	r2, r0, r1, lsl #10
 3bc:	6f910200 	svcvs	0x00910200
 3c0:	00767210 	rsbseq	r7, r6, r0, lsl r2
 3c4:	25010701 	strcs	r0, [r1, #-1793]	; 0xfffff8ff
 3c8:	02000000 	andeq	r0, r0, #0
 3cc:	19007791 	stmdbne	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 3d0:	0000027b 	andeq	r0, r0, fp, ror r2
 3d4:	035ef001 	cmpeq	lr, #1	; <UNPREDICTABLE>
 3d8:	006e2000 	rsbeq	r2, lr, r0
 3dc:	9c010000 	stcls	0, cr0, [r1], {-0}
 3e0:	000003f1 	strdeq	r0, [r0], -r1
 3e4:	0100631a 	tsteq	r0, sl, lsl r3
 3e8:	000025f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
 3ec:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 3f0:	00401b00 	subeq	r1, r0, r0, lsl #22
 3f4:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
 3f8:	20000304 	andcs	r0, r0, r4, lsl #6
 3fc:	0000005a 	andeq	r0, r0, sl, asr r0
 400:	04159c01 	ldreq	r9, [r5], #-3073	; 0xfffff3ff
 404:	471c0000 	ldrmi	r0, [ip, -r0]
 408:	01000000 	mrseq	r0, (UNDEF: 0)
 40c:	000025d8 	ldrdeq	r2, [r0], -r8
 410:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 414:	01ae1d00 			; <UNDEFINED> instruction: 0x01ae1d00
 418:	d0010000 	andle	r0, r1, r0
 41c:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
 420:	0000004c 	andeq	r0, r0, ip, asr #32
 424:	04439c01 	strbeq	r9, [r3], #-3073	; 0xfffff3ff
 428:	781e0000 	ldmdavc	lr, {}	; <UNPREDICTABLE>
 42c:	25d00100 	ldrbcs	r0, [r0, #256]	; 0x100
 430:	02000000 	andeq	r0, r0, #0
 434:	631a6f91 	tstvs	sl, #580	; 0x244
 438:	25d20100 	ldrbcs	r0, [r2, #256]	; 0x100
 43c:	02000000 	andeq	r0, r0, #0
 440:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
 444:	000001c5 	andeq	r0, r0, r5, asr #3
 448:	0274c801 	rsbseq	ip, r4, #65536	; 0x10000
 44c:	00442000 	subeq	r2, r4, r0
 450:	9c010000 	stcls	0, cr0, [r1], {-0}
 454:	00000471 	andeq	r0, r0, r1, ror r4
 458:	0100781e 	tsteq	r0, lr, lsl r8
 45c:	000025c8 	andeq	r2, r0, r8, asr #11
 460:	6f910200 	svcvs	0x00910200
 464:	0100631a 	tsteq	r0, sl, lsl r3
 468:	000025ca 	andeq	r2, r0, sl, asr #11
 46c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 470:	02211f00 	eoreq	r1, r1, #0, 30
 474:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
 478:	20000000 	andcs	r0, r0, r0
 47c:	0000000c 	andeq	r0, r0, ip
 480:	2a1b9c01 	bcs	6e748c <startup-0x1f918b74>
 484:	01000000 	mrseq	r0, (UNDEF: 0)
 488:	000250b7 	strheq	r5, [r2], -r7
 48c:	00002420 	andeq	r2, r0, r0, lsr #8
 490:	a59c0100 	ldrge	r0, [ip, #256]	; 0x100
 494:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
 498:	0100736d 	tsteq	r0, sp, ror #6
 49c:	0000b6b7 			; <UNDEFINED> instruction: 0x0000b6b7
 4a0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 4a4:	02a31b00 	adceq	r1, r3, #0, 22
 4a8:	a6010000 	strge	r0, [r1], -r0
 4ac:	2000020c 	andcs	r0, r0, ip, lsl #4
 4b0:	00000044 	andeq	r0, r0, r4, asr #32
 4b4:	04c89c01 	strbeq	r9, [r8], #3073	; 0xc01
 4b8:	751e0000 	ldrvc	r0, [lr, #-0]
 4bc:	a6010073 			; <UNDEFINED> instruction: 0xa6010073
 4c0:	000000b6 	strheq	r0, [r0], -r6
 4c4:	00749102 	rsbseq	r9, r4, r2, lsl #2
 4c8:	00017d1f 	andeq	r7, r1, pc, lsl sp
 4cc:	c89b0100 	ldmgt	fp, {r8}
 4d0:	44200001 	strtmi	r0, [r0], #-1
 4d4:	01000000 	mrseq	r0, (UNDEF: 0)
 4d8:	02151f9c 	andseq	r1, r5, #156, 30	; 0x270
 4dc:	90010000 	andls	r0, r1, r0
 4e0:	20000184 	andcs	r0, r0, r4, lsl #3
 4e4:	00000044 	andeq	r0, r0, r4, asr #32
 4e8:	dc1b9c01 	ldcle	12, cr9, [fp], {1}
 4ec:	01000002 	tsteq	r0, r2
 4f0:	0000f068 	andeq	pc, r0, r8, rrx
 4f4:	00009420 	andeq	r9, r0, r0, lsr #8
 4f8:	0c9c0100 	ldfeqs	f0, [ip], {0}
 4fc:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
 500:	6801006f 	stmdavs	r1, {r0, r1, r2, r3, r5, r6}
 504:	000001a0 	andeq	r0, r0, r0, lsr #3
 508:	00749102 	rsbseq	r9, r4, r2, lsl #2
 50c:	0001891b 	andeq	r8, r1, fp, lsl r9
 510:	90600100 	rsbls	r0, r0, r0, lsl #2
 514:	60200000 	eorvs	r0, r0, r0
 518:	01000000 	mrseq	r0, (UNDEF: 0)
 51c:	00055b9c 	muleq	r5, ip, fp
 520:	006f1e00 	rsbeq	r1, pc, r0, lsl #28
 524:	01a06001 	moveq	r6, r1
 528:	91020000 	mrsls	r0, (UNDEF: 2)
 52c:	0098156c 	addseq	r1, r8, ip, ror #10
 530:	00502000 	subseq	r2, r0, r0
 534:	691a0000 	ldmdbvs	sl, {}	; <UNPREDICTABLE>
 538:	9f620100 	svcls	0x00620100
 53c:	02000000 	andeq	r0, r0, #0
 540:	9e157491 	cfcmpsls	r7, mvf5, mvf1
 544:	38200000 	stmdacc	r0!, {}	; <UNPREDICTABLE>
 548:	20000000 	andcs	r0, r0, r0
 54c:	0000005c 	andeq	r0, r0, ip, asr r0
 550:	009f5c01 	addseq	r5, pc, r1, lsl #24
 554:	00210000 	eoreq	r0, r1, r0
 558:	1b000000 	blne	560 <startup-0x1ffffaa0>
 55c:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
 560:	00305801 	eorseq	r5, r0, r1, lsl #16
 564:	00602000 	rsbeq	r2, r0, r0
 568:	9c010000 	stcls	0, cr0, [r1], {-0}
 56c:	000005aa 	andeq	r0, r0, sl, lsr #11
 570:	01006f1e 	tsteq	r0, lr, lsl pc
 574:	0001a058 	andeq	sl, r1, r8, asr r0
 578:	6c910200 	lfmvs	f0, 4, [r1], {0}
 57c:	00003815 	andeq	r3, r0, r5, lsl r8
 580:	00005020 	andeq	r5, r0, r0, lsr #32
 584:	00691a00 	rsbeq	r1, r9, r0, lsl #20
 588:	009f5a01 	addseq	r5, pc, r1, lsl #20
 58c:	91020000 	mrsls	r0, (UNDEF: 2)
 590:	003e1574 	eorseq	r1, lr, r4, ror r5
 594:	00382000 	eorseq	r2, r8, r0
 598:	5c200000 	stcpl	0, cr0, [r0], #-0
 59c:	01000000 	mrseq	r0, (UNDEF: 0)
 5a0:	00009f5c 	andeq	r9, r0, ip, asr pc
 5a4:	00002100 	andeq	r2, r0, r0, lsl #2
 5a8:	6a220000 	bvs	8805b0 <startup-0x1f77fa50>
 5ac:	01000002 	tsteq	r0, r2
 5b0:	00001052 	andeq	r1, r0, r2, asr r0
 5b4:	00002020 	andeq	r2, r0, r0, lsr #32
 5b8:	1e9c0100 	fmlnee	f0, f4, f0
 5bc:	5201006f 	andpl	r0, r1, #111	; 0x6f
 5c0:	000001a0 	andeq	r0, r0, r0, lsr #3
 5c4:	1c749102 	ldfnep	f1, [r4], #-8
 5c8:	000001f1 	strdeq	r0, [r0], -r1
 5cc:	009f5201 	addseq	r5, pc, r1, lsl #4
 5d0:	91020000 	mrsls	r0, (UNDEF: 2)
 5d4:	02fe1c70 	rscseq	r1, lr, #112, 24	; 0x7000
 5d8:	52010000 	andpl	r0, r1, #0
 5dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 5e0:	006c9102 	rsbeq	r9, ip, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	00001349 	andeq	r1, r0, r9, asr #6
  20:	0b002403 	bleq	9034 <startup-0x1fff6fcc>
  24:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  28:	0400000e 	streq	r0, [r0], #-14
  2c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
  30:	0b3a0b0b 	bleq	e82c64 <startup-0x1f17d39c>
  34:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  38:	0d050000 	stceq	0, cr0, [r5, #-0]
  3c:	3a080300 	bcc	200c44 <startup-0x1fdff3bc>
  40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	000b3813 	andeq	r3, fp, r3, lsl r8
  48:	000d0600 	andeq	r0, sp, r0, lsl #12
  4c:	0b3a0e03 	bleq	e83860 <startup-0x1f17c7a0>
  50:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  54:	00000b38 	andeq	r0, r0, r8, lsr fp
  58:	0b002407 	bleq	907c <startup-0x1fff6f84>
  5c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  60:	08000008 	stmdaeq	r0, {r3}
  64:	13490101 	movtne	r0, #37121	; 0x9101
  68:	00001301 	andeq	r1, r0, r1, lsl #6
  6c:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  70:	000b2f13 	andeq	r2, fp, r3, lsl pc
  74:	000f0a00 	andeq	r0, pc, r0, lsl #20
  78:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  7c:	340b0000 	strcc	r0, [fp], #-0
  80:	3a0e0300 	bcc	380c88 <startup-0x1fc7f378>
  84:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  88:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
  8c:	0c000018 	stceq	0, cr0, [r0], {24}
  90:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
  94:	00001301 	andeq	r1, r0, r1, lsl #6
  98:	4900050d 	stmdbmi	r0, {r0, r2, r3, r8, sl}
  9c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  a0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  a4:	0b3b0b3a 	bleq	ec2d94 <startup-0x1f13d26c>
  a8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  ac:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
  b0:	03193f01 	tsteq	r9, #1, 30
  b4:	3b0b3a0e 	blcc	2ce8f4 <startup-0x1fd3170c>
  b8:	11192705 	tstne	r9, r5, lsl #14
  bc:	40061201 	andmi	r1, r6, r1, lsl #4
  c0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  c4:	00001301 	andeq	r1, r0, r1, lsl #6
  c8:	03003410 	movweq	r3, #1040	; 0x410
  cc:	3b0b3a08 	blcc	2ce8f4 <startup-0x1fd3170c>
  d0:	02134905 	andseq	r4, r3, #81920	; 0x14000
  d4:	11000018 	tstne	r0, r8, lsl r0
  d8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  dc:	0b3a0e03 	bleq	e838f0 <startup-0x1f17c710>
  e0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
  e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
  e8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
  ec:	12000019 	andne	r0, r0, #25
  f0:	08030005 	stmdaeq	r3, {r0, r2}
  f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  f8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  fc:	34130000 	ldrcc	r0, [r3], #-0
 100:	3a0e0300 	bcc	380d08 <startup-0x1fc7f2f8>
 104:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 108:	00180213 	andseq	r0, r8, r3, lsl r2
 10c:	002e1400 	eoreq	r1, lr, r0, lsl #8
 110:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 114:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 118:	01111927 	tsteq	r1, r7, lsr #18
 11c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 120:	00194296 	mulseq	r9, r6, r2
 124:	010b1500 	tsteq	fp, r0, lsl #10
 128:	06120111 			; <UNDEFINED> instruction: 0x06120111
 12c:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 130:	3a0e0301 	bcc	380d3c <startup-0x1fc7f2c4>
 134:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 138:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 13c:	96184006 	ldrls	r4, [r8], -r6
 140:	13011942 	movwne	r1, #6466	; 0x1942
 144:	05170000 	ldreq	r0, [r7, #-0]
 148:	3a0e0300 	bcc	380d50 <startup-0x1fc7f2b0>
 14c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 150:	00180213 	andseq	r0, r8, r3, lsl r2
 154:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
 158:	0b3a0e03 	bleq	e8396c <startup-0x1f17c694>
 15c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 160:	01111349 	tsteq	r1, r9, asr #6
 164:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 168:	01194296 			; <UNDEFINED> instruction: 0x01194296
 16c:	19000013 	stmdbne	r0, {r0, r1, r4}
 170:	0e03012e 	adfeqsp	f0, f3, #0.5
 174:	0b3b0b3a 	bleq	ec2e64 <startup-0x1f13d19c>
 178:	01111927 	tsteq	r1, r7, lsr #18
 17c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 180:	01194296 			; <UNDEFINED> instruction: 0x01194296
 184:	1a000013 	bne	1d8 <startup-0x1ffffe28>
 188:	08030034 	stmdaeq	r3, {r2, r4, r5}
 18c:	0b3b0b3a 	bleq	ec2e7c <startup-0x1f13d184>
 190:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 194:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 198:	03193f01 	tsteq	r9, #1, 30
 19c:	3b0b3a0e 	blcc	2ce9dc <startup-0x1fd31624>
 1a0:	1119270b 	tstne	r9, fp, lsl #14
 1a4:	40061201 	andmi	r1, r6, r1, lsl #4
 1a8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1ac:	00001301 	andeq	r1, r0, r1, lsl #6
 1b0:	0300051c 	movweq	r0, #1308	; 0x51c
 1b4:	3b0b3a0e 	blcc	2ce9f4 <startup-0x1fd3160c>
 1b8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1bc:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
 1c0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1c4:	0b3a0e03 	bleq	e839d8 <startup-0x1f17c628>
 1c8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1d0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1d4:	00130119 	andseq	r0, r3, r9, lsl r1
 1d8:	00051e00 	andeq	r1, r5, r0, lsl #28
 1dc:	0b3a0803 	bleq	e821f0 <startup-0x1f17de10>
 1e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1e4:	00001802 	andeq	r1, r0, r2, lsl #16
 1e8:	3f002e1f 	svccc	0x00002e1f
 1ec:	3a0e0319 	bcc	380e58 <startup-0x1fc7f1a8>
 1f0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1f4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1f8:	97184006 	ldrls	r4, [r8, -r6]
 1fc:	00001942 	andeq	r1, r0, r2, asr #18
 200:	3f012e20 	svccc	0x00012e20
 204:	3a0e0319 	bcc	380e70 <startup-0x1fc7f190>
 208:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 20c:	00193c13 	andseq	r3, r9, r3, lsl ip
 210:	00182100 	andseq	r2, r8, r0, lsl #2
 214:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
 218:	03193f01 	tsteq	r9, #1, 30
 21c:	3b0b3a0e 	blcc	2cea5c <startup-0x1fd315a4>
 220:	1119270b 	tstne	r9, fp, lsl #14
 224:	40061201 	andmi	r1, r6, r1, lsl #4
 228:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 22c:	Address 0x0000022c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000814 	andeq	r0, r0, r4, lsl r8
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000824 	andcs	r0, r0, r4, lsr #16
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001be 			; <UNDEFINED> instruction: 0x000001be
   4:	004a0002 	subeq	r0, sl, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	65636562 	strbvs	r6, [r3, #-1378]!	; 0xfffffa9e
  28:	6f442f72 	svcvs	0x00442f72
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	746e6963 	strbtvc	r6, [lr], #-2403	; 0xfffff69d
  38:	2f326f72 	svccs	0x00326f72
  3c:	6f747561 	svcvs	0x00747561
  40:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  44:	74730000 	ldrbtvc	r0, [r3], #-0
  48:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  4c:	00632e70 	rsbeq	r2, r3, r0, ror lr
  50:	00000001 	andeq	r0, r0, r1
  54:	10020500 	andne	r0, r2, r0, lsl #10
  58:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  5c:	670100d2 			; <UNDEFINED> instruction: 0x670100d2
  60:	4b4d3d3d 	blmi	134f55c <startup-0x1ecb0aa4>
  64:	03040200 	movweq	r0, #16896	; 0x4200
  68:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
  6c:	00aa0803 	adceq	r0, sl, r3, lsl #16
  70:	06010402 	streq	r0, [r1], -r2, lsl #8
  74:	4d6a063c 	stclmi	6, cr0, [sl, #-240]!	; 0xffffff10
  78:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
  7c:	02003e03 	andeq	r3, r0, #3, 28	; 0x30
  80:	aa080304 	bge	200c98 <startup-0x1fdff368>
  84:	01040200 	mrseq	r0, R12_usr
  88:	6a063c06 	bvs	18f0a8 <startup-0x1fe70f58>
  8c:	754b4b4d 	strbvc	r4, [fp, #-2893]	; 0xfffff4b3
  90:	845a4c76 	ldrbhi	r4, [sl], #-3190	; 0xfffff38a
  94:	845b4c5b 	ldrbhi	r4, [fp], #-3163	; 0xfffff3a5
  98:	10034b5a 	andne	r4, r3, sl, asr fp
  9c:	3d3d304a 	ldccc	0, cr3, [sp, #-296]!	; 0xfffffed8
  a0:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
  a4:	20060104 	andcs	r0, r6, r4, lsl #2
  a8:	a13d6706 	teqge	sp, r6, lsl #14
  ac:	3d3d3d30 	ldccc	13, cr3, [sp, #-192]!	; 0xffffff40
  b0:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
  b4:	06200601 	strteq	r0, [r0], -r1, lsl #12
  b8:	4ca13d67 	stcmi	13, cr3, [r1], #412	; 0x19c
  bc:	2f223f83 	svccs	0x00223f83
  c0:	032f2f2f 			; <UNDEFINED> instruction: 0x032f2f2f
  c4:	4d443c7a 	stclmi	12, cr3, [r4, #-488]	; 0xfffffe18
  c8:	0f039f4b 	svceq	0x00039f4b
  cc:	c959684a 	ldmdbgt	r9, {r1, r3, r6, fp, sp, lr}^
  d0:	5968694b 	stmdbpl	r8!, {r0, r1, r3, r6, r8, fp, sp, lr}^
  d4:	676959f3 			; <UNDEFINED> instruction: 0x676959f3
  d8:	03741403 	cmneq	r4, #50331648	; 0x3000000
  dc:	1403206c 	strne	r2, [r3], #-108	; 0xffffff94
  e0:	206e034a 	rsbcs	r0, lr, sl, asr #6
  e4:	3d3d233d 	ldccc	3, cr2, [sp, #-244]!	; 0xffffff0c
  e8:	233d3d23 	teqcs	sp, #2240	; 0x8c0
  ec:	3e4d233d 	mcrcc	3, 2, r2, cr13, cr13, {1}
  f0:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
  f4:	2f3d4b31 	svccs	0x003d4b31
  f8:	36293d75 			; <UNDEFINED> instruction: 0x36293d75
  fc:	3d68bd3d 	stclcc	13, cr11, [r8, #-244]!	; 0xffffff0c
 100:	3e5a3d3d 	mrccc	13, 2, r3, cr10, cr13, {1}
 104:	5a3d3d59 	bpl	f4f670 <startup-0x1f0b0990>
 108:	3d3f5a3f 	vldmdbcc	pc!, {s10-s72}
 10c:	675967cb 	ldrbvs	r6, [r9, -fp, asr #15]
 110:	5a4b914d 	bpl	12e464c <startup-0x1ed1b9b4>
 114:	3f5a3e3e 	svccc	0x005a3e3e
 118:	3d3d405a 	ldccc	0, cr4, [sp, #-360]!	; 0xfffffe98
 11c:	3d91693d 	vldrcc.16	s12, [r1, #122]	; 0x7a	; <UNPREDICTABLE>
 120:	4d833d59 	stcmi	13, cr3, [r3, #356]	; 0x164
 124:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 128:	3d4d833d 	stclcc	3, cr8, [sp, #-244]	; 0xffffff0c
 12c:	004c9f4c 	subeq	r9, ip, ip, asr #30
 130:	4c030402 	cfstrsmi	mvf0, [r3], {2}
 134:	03040200 	movweq	r0, #16896	; 0x4200
 138:	04020048 	streq	r0, [r2], #-72	; 0xffffffb8
 13c:	00580601 	subseq	r0, r8, r1, lsl #12
 140:	06020402 	streq	r0, [r2], -r2, lsl #8
 144:	04020045 	streq	r0, [r2], #-69	; 0xffffffbb
 148:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 14c:	4d4a0a03 	vstrmi	s1, [sl, #-12]
 150:	3d3d3d30 	ldccc	13, cr3, [sp, #-192]!	; 0xffffff40
 154:	4b3d3d3d 	blmi	f4f650 <startup-0x1f0b09b0>
 158:	4b4b4b4b 	blmi	12d2e8c <startup-0x1ed2d174>
 15c:	3f3c0c03 	svccc	0x003c0c03
 160:	0402006a 	streq	r0, [r2], #-106	; 0xffffff96
 164:	004a0601 	subeq	r0, sl, r1, lsl #12
 168:	4a020402 	bmi	81178 <startup-0x1ff7ee88>
 16c:	03040200 	movweq	r0, #16896	; 0x4200
 170:	764c064a 	strbvc	r0, [ip], -sl, asr #12
 174:	59591308 	ldmdbpl	r9, {r3, r8, r9, ip}^
 178:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 17c:	683d5b59 	ldmdavs	sp!, {r0, r3, r4, r6, r8, r9, fp, ip, lr}
 180:	4b4c4b3d 	blmi	1312e7c <startup-0x1eced184>
 184:	91c9c93f 	bicls	ip, r9, pc, lsr r9
 188:	93a03ebc 	movls	r3, #188, 28	; 0xbc0
 18c:	03ac5a03 			; <UNDEFINED> instruction: 0x03ac5a03
 190:	2f852028 	svccs	0x00852028
 194:	ae3d3d3d 	mrcge	13, 1, r3, cr13, cr13, {1}
 198:	332f2f3d 			; <UNDEFINED> instruction: 0x332f2f3d
 19c:	01040200 	mrseq	r0, R12_usr
 1a0:	04020069 	streq	r0, [r2], #-105	; 0xffffff97
 1a4:	02005901 	andeq	r5, r0, #16384	; 0x4000
 1a8:	023b0104 	eorseq	r0, fp, #4, 2
 1ac:	01010003 	tsteq	r1, r3
 1b0:	00020500 	andeq	r0, r2, r0, lsl #10
 1b4:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 1b8:	130101be 	movwne	r0, #4542	; 0x11be
 1bc:	0003025e 	andeq	r0, r3, lr, asr r2
 1c0:	Address 0x000001c0 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
   4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
   8:	6365625c 	cmnvs	r5, #92, 4	; 0xc0000005
   c:	445c7265 	ldrbmi	r7, [ip], #-613	; 0xfffffd9b
  10:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
  14:	73746e65 	cmnvc	r4, #1616	; 0x650
  18:	6e69635c 	mcrvs	3, 3, r6, cr9, cr12, {2}
  1c:	326f7274 	rsbcc	r7, pc, #116, 4	; 0x40000007
  20:	7475615c 	ldrbtvc	r6, [r5], #-348	; 0xfffffea4
  24:	6e6f706f 	cdpvs	0, 6, cr7, cr15, cr15, {3}
  28:	65640067 	strbvs	r0, [r4, #-103]!	; 0xffffff99
  2c:	5f79616c 	svcpl	0x0079616c
  30:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
  34:	4f740069 	svcmi	0x00740069
  38:	6d006a62 	vstrvs	s12, [r0, #-392]	; 0xfffffe78
  3c:	0065766f 	rsbeq	r7, r5, pc, ror #12
  40:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
  44:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
  48:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
  4c:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
  50:	69640072 	stmdbvs	r4!, {r1, r4, r5, r6}^
  54:	64007872 	strvs	r7, [r0], #-2162	; 0xfffff78e
  58:	00797269 	rsbseq	r7, r9, r9, ror #4
  5c:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
  60:	6162006c 	cmnvs	r2, ip, rrx
  64:	70006c6c 	andvc	r6, r0, ip, ror #24
  68:	00656761 	rsbeq	r6, r5, r1, ror #14
  6c:	20554e47 	subscs	r4, r5, r7, asr #28
  70:	20393943 	eorscs	r3, r9, r3, asr #18
  74:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
  78:	30322031 	eorscc	r2, r2, r1, lsr r0
  7c:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
  80:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
  84:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  88:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  8c:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  90:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  94:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  98:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
  9c:	6172622d 	cmnvs	r2, sp, lsr #4
  a0:	2068636e 	rsbcs	r6, r8, lr, ror #6
  a4:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  a8:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  ac:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
  b0:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
  b4:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  b8:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  bc:	616d2d20 	cmnvs	sp, r0, lsr #26
  c0:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  c4:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  c8:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  cc:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  d0:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  d4:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  d8:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  dc:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  e0:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  e4:	616d2d20 	cmnvs	sp, r0, lsr #26
  e8:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  ec:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  f0:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  f4:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  f8:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  fc:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
 100:	00393963 	eorseq	r3, r9, r3, ror #18
 104:	696f5074 	stmdbvs	pc!, {r2, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
 108:	4300746e 	movwmi	r7, #1134	; 0x46e
 10c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 110:	2f737265 	svccs	0x00737265
 114:	65636562 	strbvs	r6, [r3, #-1378]!	; 0xfffffa9e
 118:	6f442f72 	svcvs	0x00442f72
 11c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 120:	2f73746e 	svccs	0x0073746e
 124:	746e6963 	strbtvc	r6, [lr], #-2403	; 0xfffff69d
 128:	2f326f72 	svccs	0x00326f72
 12c:	6f747561 	svcvs	0x00747561
 130:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 134:	6174732f 	cmnvs	r4, pc, lsr #6
 138:	70757472 	rsbsvc	r7, r5, r2, ror r4
 13c:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
 140:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 144:	2064656e 	rsbcs	r6, r4, lr, ror #10
 148:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 14c:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 150:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 154:	70006465 	andvc	r6, r0, r5, ror #8
 158:	0078736f 	rsbseq	r7, r8, pc, ror #6
 15c:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 160:	6c616200 	sfmvs	f6, 2, [r1], #-0
 164:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xfffff094
 168:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 16c:	67007972 	smlsdxvs	r0, r2, r9, r7
 170:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 174:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 178:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 17c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 180:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff827 <ball+0xdfffeeb7>
 184:	736e3030 	cmnvc	lr, #48	; 0x30
 188:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 18c:	6f5f7261 	svcvs	0x005f7261
 190:	63656a62 	cmnvs	r5, #401408	; 0x62000
 194:	616d0074 	smcvs	53252	; 0xd004
 198:	67006e69 	strvs	r6, [r0, -r9, ror #28]
 19c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1a0:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 1a4:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 1a8:	7a696c61 	bvc	1a5b334 <startup-0x1e5a4ccc>
 1ac:	72670065 	rsbvc	r0, r7, #101	; 0x65
 1b0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1b4:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 1b8:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 1bc:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 1c0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 1c4:	61726700 	cmnvs	r2, r0, lsl #14
 1c8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1cc:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 1d0:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 1d4:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 1d8:	6e750074 	mrcvs	0, 3, r0, cr5, cr4, {3}
 1dc:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 1e0:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 1e4:	7400746e 	strvc	r7, [r0], #-1134	; 0xfffffb92
 1e8:	6d6f6547 	cfstr64vs	mvdx6, [pc, #-284]!	; d4 <startup-0x1fffff2c>
 1ec:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 1f0:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 1f4:	00786465 	rsbseq	r6, r8, r5, ror #8
 1f8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 1fc:	7070615f 	rsbsvc	r6, r0, pc, asr r1
 200:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 204:	745f3874 	ldrbvc	r3, [pc], #-2164	; 20c <startup-0x1ffffdf4>
 208:	7a697300 	bvc	1a5ce10 <startup-0x1e5a31f0>
 20c:	73007865 	movwvc	r7, #2149	; 0x865
 210:	79657a69 	stmdbvc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 214:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 218:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 21c:	736e3035 	cmnvc	lr, #53	; 0x35
 220:	61747300 	cmnvs	r4, r0, lsl #6
 224:	70757472 	rsbsvc	r7, r5, r2, ror r4
 228:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
 22c:	6400544e 	strvs	r5, [r0], #-1102	; 0xfffffbb2
 230:	00776172 	rsbseq	r6, r7, r2, ror r1
 234:	6b73616d 	blvs	1cd87f0 <startup-0x1e327810>
 238:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 23c:	76007865 	strvc	r7, [r0], -r5, ror #16
 240:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 244:	61726700 	cmnvs	r2, r0, lsl #14
 248:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 24c:	6165725f 	cmnvs	r5, pc, asr r2
 250:	61645f64 	cmnvs	r4, r4, ror #30
 254:	67006174 	smlsdxvs	r0, r4, r1, r6
 258:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 25c:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 260:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 264:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 268:	65730061 	ldrbvs	r0, [r3, #-97]!	; 0xffffff9f
 26c:	626f5f74 	rsbvs	r5, pc, #116, 30	; 0x1d0
 270:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 274:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 278:	67006465 	strvs	r6, [r0, -r5, ror #8]
 27c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 280:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 284:	5f746961 	svcpl	0x00746961
 288:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 28c:	72670079 	rsbvc	r0, r7, #121	; 0x79
 290:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 294:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 298:	5f726165 	svcpl	0x00726165
 29c:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 2a0:	64006e65 	strvs	r6, [r0], #-3685	; 0xfffff19b
 2a4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 2a8:	63696d5f 	cmnvs	r9, #6080	; 0x17c0
 2ac:	50006f72 	andpl	r6, r0, r2, ror pc
 2b0:	4d4f4547 	cfstr64mi	mvdx4, [pc, #-284]	; 19c <startup-0x1ffffe64>
 2b4:	59525445 	ldmdbpl	r2, {r0, r2, r6, sl, ip, lr}^
 2b8:	61726400 	cmnvs	r2, r0, lsl #8
 2bc:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
 2c0:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 2c4:	61726700 	cmnvs	r2, r0, lsl #14
 2c8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2cc:	6165725f 	cmnvs	r5, pc, asr r2
 2d0:	756e0064 	strbvc	r0, [lr, #-100]!	; 0xffffff9c
 2d4:	696f706d 	stmdbvs	pc!, {r0, r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 2d8:	0073746e 	rsbseq	r7, r3, lr, ror #8
 2dc:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 2e0:	6a626f5f 	bvs	189c064 <startup-0x1e763f9c>
 2e4:	00746365 	rsbseq	r6, r4, r5, ror #6
 2e8:	70617267 	rsbvc	r7, r1, r7, ror #4
 2ec:	5f636968 	svcpl	0x00636968
 2f0:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 2f4:	6f635f65 	svcvs	0x00635f65
 2f8:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 2fc:	70730064 	rsbsvc	r0, r3, r4, rrx
 300:	79646565 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 304:	424f5000 	submi	r5, pc, #0
 308:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <ball+0xdfffe99e>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000020 	andeq	r0, r0, r0, lsr #32
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	180e4101 	stmdane	lr, {r0, r8, lr}
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000030 	andcs	r0, r0, r0, lsr r0
  3c:	00000060 	andeq	r0, r0, r0, rrx
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	180e4101 	stmdane	lr, {r0, r8, lr}
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000090 	mulcs	r0, r0, r0
  5c:	00000060 	andeq	r0, r0, r0, rrx
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	180e4101 	stmdane	lr, {r0, r8, lr}
  6c:	00070d41 	andeq	r0, r7, r1, asr #26
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  7c:	00000094 	muleq	r0, r4, r0
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	100e4101 	andne	r4, lr, r1, lsl #2
  8c:	00070d41 	andeq	r0, r7, r1, asr #26
  90:	00000018 	andeq	r0, r0, r8, lsl r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000184 	andcs	r0, r0, r4, lsl #3
  9c:	00000044 	andeq	r0, r0, r4, asr #32
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  ac:	00000018 	andeq	r0, r0, r8, lsl r0
  b0:	00000000 	andeq	r0, r0, r0
  b4:	200001c8 	andcs	r0, r0, r8, asr #3
  b8:	00000044 	andeq	r0, r0, r4, asr #32
  bc:	40080e41 	andmi	r0, r8, r1, asr #28
  c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	2000020c 	andcs	r0, r0, ip, lsl #4
  d4:	00000044 	andeq	r0, r0, r4, asr #32
  d8:	40080e41 	andmi	r0, r8, r1, asr #28
  dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e0:	100e4101 	andne	r4, lr, r1, lsl #2
  e4:	00070d41 	andeq	r0, r7, r1, asr #26
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	20000250 	andcs	r0, r0, r0, asr r2
  f4:	00000024 	andeq	r0, r0, r4, lsr #32
  f8:	40080e41 	andmi	r0, r8, r1, asr #28
  fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 100:	100e4101 	andne	r4, lr, r1, lsl #2
 104:	00070d41 	andeq	r0, r7, r1, asr #26
 108:	0000000c 	andeq	r0, r0, ip
 10c:	00000000 	andeq	r0, r0, r0
 110:	20000000 	andcs	r0, r0, r0
 114:	0000000c 	andeq	r0, r0, ip
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	20000274 	andcs	r0, r0, r4, ror r2
 124:	00000044 	andeq	r0, r0, r4, asr #32
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	180e4101 	stmdane	lr, {r0, r8, lr}
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
 144:	0000004c 	andeq	r0, r0, ip, asr #32
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	180e4101 	stmdane	lr, {r0, r8, lr}
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	20000304 	andcs	r0, r0, r4, lsl #6
 164:	0000005a 	andeq	r0, r0, sl, asr r0
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	100e4101 	andne	r4, lr, r1, lsl #2
 174:	00070d41 	andeq	r0, r7, r1, asr #26
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000000 	andeq	r0, r0, r0
 180:	2000035e 	andcs	r0, r0, lr, asr r3
 184:	0000006e 	andeq	r0, r0, lr, rrx
 188:	40080e41 	andmi	r0, r8, r1, asr #28
 18c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 190:	100e4101 	andne	r4, lr, r1, lsl #2
 194:	00070d41 	andeq	r0, r7, r1, asr #26
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000000 	andeq	r0, r0, r0
 1a0:	200003cc 	andcs	r0, r0, ip, asr #7
 1a4:	00000084 	andeq	r0, r0, r4, lsl #1
 1a8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b0:	180e4101 	stmdane	lr, {r0, r8, lr}
 1b4:	00070d41 	andeq	r0, r7, r1, asr #26
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	20000450 	andcs	r0, r0, r0, asr r4
 1c4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1c8:	40080e41 	andmi	r0, r8, r1, asr #28
 1cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d0:	100e4101 	andne	r4, lr, r1, lsl #2
 1d4:	00070d41 	andeq	r0, r7, r1, asr #26
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	00000000 	andeq	r0, r0, r0
 1e0:	2000047a 	andcs	r0, r0, sl, ror r4
 1e4:	0000006e 	andeq	r0, r0, lr, rrx
 1e8:	40080e41 	andmi	r0, r8, r1, asr #28
 1ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f0:	100e4101 	andne	r4, lr, r1, lsl #2
 1f4:	00070d41 	andeq	r0, r7, r1, asr #26
 1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1fc:	00000000 	andeq	r0, r0, r0
 200:	200004e8 	andcs	r0, r0, r8, ror #9
 204:	00000040 	andeq	r0, r0, r0, asr #32
 208:	40080e41 	andmi	r0, r8, r1, asr #28
 20c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 210:	100e4101 	andne	r4, lr, r1, lsl #2
 214:	00070d41 	andeq	r0, r7, r1, asr #26
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	00000000 	andeq	r0, r0, r0
 220:	20000528 	andcs	r0, r0, r8, lsr #10
 224:	00000046 	andeq	r0, r0, r6, asr #32
 228:	40080e41 	andmi	r0, r8, r1, asr #28
 22c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 230:	100e4101 	andne	r4, lr, r1, lsl #2
 234:	00070d41 	andeq	r0, r7, r1, asr #26
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	00000000 	andeq	r0, r0, r0
 240:	2000056e 	andcs	r0, r0, lr, ror #10
 244:	00000066 	andeq	r0, r0, r6, rrx
 248:	40080e41 	andmi	r0, r8, r1, asr #28
 24c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 250:	100e4101 	andne	r4, lr, r1, lsl #2
 254:	00070d41 	andeq	r0, r7, r1, asr #26
 258:	00000018 	andeq	r0, r0, r8, lsl r0
 25c:	00000000 	andeq	r0, r0, r0
 260:	200005d4 	ldrdcs	r0, [r0], -r4
 264:	0000005c 	andeq	r0, r0, ip, asr r0
 268:	40080e41 	andmi	r0, r8, r1, asr #28
 26c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 270:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 274:	00000024 	andeq	r0, r0, r4, lsr #32
 278:	00000000 	andeq	r0, r0, r0
 27c:	20000630 	andcs	r0, r0, r0, lsr r6
 280:	00000194 	muleq	r0, r4, r1
 284:	40100e41 	andsmi	r0, r0, r1, asr #28
 288:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 28c:	02874003 	addeq	r4, r7, #3
 290:	41018e40 	tstmi	r1, r0, asr #28
 294:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 298:	00000007 	andeq	r0, r0, r7
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
 2a0:	00000000 	andeq	r0, r0, r0
 2a4:	200007c4 	andcs	r0, r0, r4, asr #15
 2a8:	0000002c 	andeq	r0, r0, ip, lsr #32
 2ac:	40080e41 	andmi	r0, r8, r1, asr #28
 2b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2bc:	00000000 	andeq	r0, r0, r0
 2c0:	200007f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 2c4:	00000034 	andeq	r0, r0, r4, lsr r0
 2c8:	40080e41 	andmi	r0, r8, r1, asr #28
 2cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d0:	100e4101 	andne	r4, lr, r1, lsl #2
 2d4:	00070d41 	andeq	r0, r7, r1, asr #26
 2d8:	0000000c 	andeq	r0, r0, ip
 2dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2e0:	7c010001 	stcvc	0, cr0, [r1], {1}
 2e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2e8:	0000000c 	andeq	r0, r0, ip
 2ec:	000002d8 	ldrdeq	r0, [r0], -r8
 2f0:	20000825 	andcs	r0, r0, r5, lsr #16
 2f4:	0000010a 	andeq	r0, r0, sl, lsl #2
